<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Cocur\Slugify\Slugify;

/**
 * SearchListRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SearchListRepository extends EntityRepository
{
    public function search($filter, $entityId = null, $show_SharedContents = true, $orderBy = '', $orderDirection = 'ASC')
    {
        $dql = $this->createQueryBuilder('sl')->select('sl')
                ->where('sl.deletedAt IS NULL')
                ->leftJoin('sl.createdBy', 'c');

        $slugify = new Slugify();
        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('sl.slug LIKE \'%' . $slug . '%\'');
        }

        if ($entityId) {
            $dql->leftJoin('sl.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND sl.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        
        if (array_key_exists('createdBy', $filter) ) {
            $createdByUser = $filter['createdBy'];
            $dql->andWhere('c.id='.$createdByUser->getId());
        }
        
        if (array_key_exists('currentUser', $filter) ) {
            $currentUser = $filter['currentUser'];            
            $dql->andWhere('(sl.isPrivate!=1 OR (sl.isPrivate=1 AND c.id='.$currentUser->getId().'))');
        }
        
        if('' !== $orderBy){
            $dql->orderby($orderBy, $orderDirection);
        }

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null, $currentUser = null)
    {
        if ($ids) {
            // first query for hard delete
            $hardDql = $this->createQueryBuilder('sl')->delete('PostparcBundle\Entity\SearchList sl')->where('sl.id IN (' . implode(',', $ids) . ')');
            $hardDql->andWhere('sl.deletedAt IS NOT NULL');

            // second query for soft delete
            $now = new \Datetime();
            $softDql = $this->createQueryBuilder('p')->update('PostparcBundle\Entity\SearchList sl')
                    ->set('sl.deletedAt', "'" . $now->format('Y-m-d H:i:s') . "'")
                    ->where('sl.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $hardDql->andWhere('sl.entity=' . $entityId);
                $softDql->andWhere('sl.entity=' . $entityId);
            }

            if ($currentUser) {
                $softDql->set('sl.deletedBy', $currentUser->getId());
            }

            //queries execution
            $this->_em->createQuery($hardDql)->execute();
            $this->_em->createQuery($softDql)->execute();
        }
    }

    public function batchRestore($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('sl')->update('PostparcBundle\Entity\SearchList sl')
                    ->set('sl.deletedAt', 'NULL')
                    ->set('sl.deletedBy', 'NULL')
                    ->where('sl.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('sl.entity=' . $entityId);
            }
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function getTrashedElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('sl')->select('sl')
                ->where('sl.deletedAt IS NOT NULL')
                ->orderBy('sl.slug', 'ASC');
        if ($entityId) {
            $dql->andWhere('sl.entity=' . $entityId);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function autoComplete($q, $entityId = null, $show_SharedContents = true)
    {
        $dql = $this->createQueryBuilder('sl')
            ->where('sl.deletedAt IS NULL')
            ->orderby('sl.name', 'ASC')
            ;
        if ($q) {
            $dql->andWhere("sl.name LIKE '%" . $q . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('sl.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND sl.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults(30);

        return $query->getResult();
    }

    public function getUserActiveSearchList($userId)
    {
        $dql = $this->createQueryBuilder('sl')
            ->leftJoin('sl.createdBy', 'u')
            ->where('sl.deletedAt IS NULL')
            ->andwhere('u.id = ' . $userId)
            ->orderby('sl.name', 'ASC')
            ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
}
