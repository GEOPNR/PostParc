<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use PostparcBundle\Entity\Event;
use PostparcBundle\Entity\EventAlert;
use Cocur\Slugify\Slugify;

/**
 * RepresentationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepresentationRepository extends EntityRepository
{
    public function getEventRepresentationsQuery($eventId, $readerLimitations = null,$filters=[])
    {
        $dql = $this->createQueryBuilder('r')
            ->leftJoin('r.eventRepresentations', 'rr')
            ->leftJoin('rr.event', 'e')
            ->where('e.id=' . $eventId)
            ->andWhere('r.deletedAt IS NULL')
        ;
        if (is_array($readerLimitations) && (array_key_exists('mandateTypeIds', $readerLimitations) && count($readerLimitations['mandateTypeIds']) && 'off' == $readerLimitations['mandateType_noLimitation'])) {
            $dql->leftJoin('r.mandateType', 'mt');
            $dql->andwhere('mt.id IS NULL OR mt.id  IN (' . implode(',', $readerLimitations['mandateTypeIds']) . ')');
        }
        if (count($filters) > 1) {
            $conditions = [];

            foreach ($filters as $key => $filter) {
                switch ($key) {
                    case 'is_present':
                        $conditions[] = $dql->expr()->isNotNull('rr.confirmationDate');
                        break;
                    case 'is_missing':
                        $conditions[] = $dql->expr()->isNotNull('rr.unconfirmationDate');
                        break;
                    case 'is_represent':
                        $conditions[] = $dql->expr()->isNotNull('rr.representedBy');
                        break;
                }
            }//dump($dql->expr()->orX(implode(' OR ', $conditions)));die;
            $dql->andWhere($dql->expr()->orX(implode(' OR ', $conditions)));
        }        

        return $query = $this->_em->createQuery($dql);
    }

    public function autoComplete($q, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('r')
            ->where('r.deletedAt IS NULL')
            ->orderby('r.name', 'ASC')
        ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q, '-');
            $dql->andwhere('r.slug LIKE \'%' . $slug . '%\'');
            //$dql->andWhere("r.name LIKE '%".$q."%'");
        }

        if ($entityId) {
            $dql->leftJoin('r.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND r.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function autoCompleteForEvent($eventId, $term, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('r')
            ->leftJoin('r.eventRepresentations', 'rr')
            ->leftJoin('rr.event', 'evt')
            ->where('evt.id is null or evt.id!=' . $eventId)
            ->andWhere('r.deletedAt IS NULL')
            ->orderby('r.name', 'ASC')
        ;
        if ($term) {
            $dql->andWhere("r.name LIKE '%" . $term . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('r.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND r.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function getSendableRepresentationAlerts($now)
    {
        $dql = $this->createQueryBuilder('r')
            ->leftJoin('r.alerter', 'u')
            ->where('r.sendAlert=1')
            ->andwhere("r.alertDate='" . $now->format('Y-m-d') . "'")
            ->andWhere('u.id is not null')
            ->andWhere('r.deletedAt IS NULL')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getOrganizationRepresentation($organizationID, $entityId = null, $show_SharedContents = true, $subServiceOrganizations = null)
    {
        $organisationsIdsArray = [$organizationID];
        $dql = $this->createQueryBuilder('r')
            ->where('r.deletedAt IS NULL')
            ->leftJoin('r.organization', 'o')
            ->orderBy('r.slug', 'ASC');

        // ajout pfos des organismes enfants de type service
        if (is_array($subServiceOrganizations) && count($subServiceOrganizations)) {
            foreach ($subServiceOrganizations as $subServiceOrganization) {
                $organisationsIdsArray[] = $subServiceOrganization->getId();
            }
        }
        $dql->andWhere('o.id IN (' . implode(',', $organisationsIdsArray) . ')');
        if ($entityId) {
            $dql->leftJoin('r.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND r.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function simpleSearch($q, $entityId = null, $readerLimitations = null, $show_SharedContents = true)
    {
        $dql = $this->createQueryBuilder('r')
            ->select('r, o, ot, coord, city, mt, p, pfo, pfop, nr, s, ety, evt, rep')
            ->leftJoin('r.organization', 'o')
            ->leftJoin('r.service', 's')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('r.entity', 'ety')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            //->leftJoin('coord.email', 'e')
            ->leftJoin('r.person', 'p')
            ->leftJoin('r.pfo', 'pfo')
            ->leftJoin('pfo.person', 'pfop')
            ->leftJoin('o.organizationType', 'ot')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('r.mandateType', 'mt')
            ->leftJoin('r.natureOfRepresentation', 'nr')
            ->where('r.deletedAt IS NULL')
            ->andWhere('o.deletedAt IS NULL')
            ->andWhere('p.deletedAt IS NULL')
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderby('o.name', 'ASC')
        ;
        if ($q) {
            $q = str_replace("'", '', $q);
            $dql->andWhere(
                "o.name LIKE '%" . $q . "%' "
                . "OR o.abbreviation LIKE '%" . $q . "%' "
                . "OR s.name LIKE '%" . $q . "%' "
                . "OR ot.name LIKE '%" . $q . "%' "
                . "OR p.name LIKE '%" . $q . "%' "
                . "OR p.firstName LIKE '%" . $q . "%' "
                . "OR pfop.name LIKE '%" . $q . "%' "
                . "OR pfop.firstName LIKE '%" . $q . "%' "
                //                    . "OR coord.phone LIKE '%" . str_replace(array(' ','.','-'),'%',$q) . "%' "
                //                    . "OR coord.mobilePhone LIKE '%" . str_replace(array(' ','.','-'),'%',$q) . "%' "
                //                    . "OR e.email LIKE '%" . $q . "%' "
            );
            $dql->andWhere('o.deletedAt IS NULL AND p.deletedAt IS NULL AND pfop.deletedAt IS NULL');
        }
        if ($entityId) {
            $dql->leftJoin('r.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND r.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        if (is_array($readerLimitations)) {
            if (array_key_exists('organizationTypeIds', $readerLimitations) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->leftJoin('o.tags', 'tag');
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }
        //echo $query->getSQL();die;
        return $this->_em->createQuery($dql);
    }

    public function advancedSearch($searchParams, $entityId = null, $readerLimitations = null, $show_SharedContents = true, $fromApi = false)
    {
        $dql = $this->createQueryBuilder('r')
            ->select('r, o, ot, s, mt, coord, city, repCoord, repCity, nr, p, personCoord, personCity, pfo, pfoOrganisme, pfoOrgaCoord, pfoOrgaCity, pfoPrefCoord, pfoPrefCity, tag, ety, evt, rep, tag')
            ->leftJoin('r.organization', 'o')
            ->leftJoin('r.person', 'p')
            ->leftJoin('r.pfo', 'pfo')
            ->leftJoin('o.organizationType', 'ot')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('r.entity', 'ety')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('city.territories', 'territory')
            ->leftJoin('r.coordinate', 'repCoord')
            ->leftJoin('repCoord.city', 'repCity')
            ->leftJoin('p.coordinate', 'personCoord')
            ->leftJoin('personCoord.city', 'personCity')
            ->leftJoin('pfo.organization', 'pfoOrganisme')
            ->leftJoin('pfoOrganisme.coordinate', 'pfoOrgaCoord')
            ->leftJoin('pfoOrgaCoord.city', 'pfoOrgaCity')
            ->leftJoin('pfo.preferedCoordinateAddress', 'pfoPrefCoord')
            ->leftJoin('pfoPrefCoord.city', 'pfoPrefCity')
            ->leftJoin('o.tags', 'tag')
            ->leftJoin('r.tags', 'reptag')
            ->leftJoin('r.mandateType', 'mt')
            ->leftJoin('r.service', 's')
            ->leftJoin('r.natureOfRepresentation', 'nr')
            ->where('r.deletedAt IS NULL')
            ->andWhere('o.deletedAt IS NULL')
            ->andWhere('p.deletedAt IS NULL')
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderby('o.name', 'ASC')
    //->groupBy('o.id')
        ;
        $eligibaleCriteria = true;
        if (count(array_filter($searchParams)) > 1 && !(in_array(count(array_filter($searchParams)), [4, 6]) && (isset($searchParams['organizationType_sub']) && 'on' == $searchParams['organizationType_sub']) && (isset($searchParams['territory_sub']) && (isset($searchParams['territory_sub']) && 'on' == $searchParams['territory_sub'])) && (isset($searchParams['group_sub']) && 'on' == $searchParams['group_sub']))) {
            $eligibaleCriteria = false;
            if (isset($searchParams['organizationIds']) && count($searchParams['organizationIds']) > 0) {
                if (isset($searchParams['organization_exclusion']) && 'on' == $searchParams['organization_exclusion']) {
                    $dql->andwhere('( o.id is null or o.id  NOT IN (' . implode(',', $searchParams['organizationIds']) . ') )');
                } else {
                    $dql->andwhere('o.id  IN (' . implode(',', $searchParams['organizationIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['organizationTypeIds']) && count($searchParams['organizationTypeIds']) > 0) {
                if (isset($searchParams['organizationType_exclusion']) && 'on' == $searchParams['organizationType_exclusion']) {
                    $dql->andwhere('( ot.id is null or ot.id  NOT IN (' . implode(',', $searchParams['organizationTypeIds']) . ') )');
                } else {
                    $dql->andwhere('ot.id  IN (' . implode(',', $searchParams['organizationTypeIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['cityIds']) && count($searchParams['cityIds']) > 0) {
                if (isset($searchParams['city_exclusion']) && 'on' == $searchParams['city_exclusion']) {
                    $dql->andwhere(
                        'city.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . 'AND repCity.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . 'AND personCity.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . 'AND pfoPrefCity.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . 'AND pfoOrgaCity.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ')'
                    );
                } else {
                    $dql->andwhere(
                        'city.id  IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . ' OR repCity.id  IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . ' OR personCity.id  IN (' . implode(',', $searchParams['cityIds']) . ')'
                        . ' OR ( pfoPrefCoord.id IS NOT NULL AND pfoPrefCity.id  IN (' . implode(',', $searchParams['cityIds']) . ') )'
                        . ' OR ( pfoPrefCoord.id IS NULL AND pfoOrgaCity.id  IN (' . implode(',', $searchParams['cityIds']) . ') )'
                    );
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['departmentIds']) && count($searchParams['departmentIds']) > 0) {
                $slugs = "'" . implode("','", $searchParams['departmentIds']) . "'";
                if (isset($searchParams['department_exclusion']) && 'on' == $searchParams['department_exclusion']) {
                    $dql->andwhere(
                        "city.slugDepartment NOT IN ($slugs)"
                        . " AND city.slugDepartment NOT IN ($slugs)"
                        . " AND personCity.slugDepartment NOT IN ($slugs)"
                        . " AND pfoPrefCity.slugDepartment NOT IN ($slugs)"
                        . " AND pfoOrgaCity.slugDepartment NOT IN ($slugs)"
                    );
                } else {
                    $dql->andwhere(
                        "city.slugDepartment IN ($slugs)"
                        . " OR repCity.slugDepartment IN ($slugs)"
                        . " OR personCity.slugDepartment IN ($slugs)"
                        . " OR (pfoPrefCoord.id IS NOT NULL AND pfoPrefCity.slugDepartment IN ($slugs) )"
                        . " OR (pfoPrefCoord.id IS NULL AND pfoOrgaCity.slugDepartment IN ($slugs) )"
                    );
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['territoryIds']) && count($searchParams['territoryIds']) > 0) {
                if (isset($searchParams['territory_exclusion']) && 'on' == $searchParams['territory_exclusion']) {
                    $dql->andwhere('( territory.id is null or territory.id  NOT IN (' . implode(',', $searchParams['territoryIds']) . ') )');
                } else {
                    $dql->andwhere('territory.id  IN (' . implode(',', $searchParams['territoryIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['tagIds']) && count($searchParams['tagIds']) > 0) {
                if (isset($searchParams['tag_exclusion']) && 'on' == $searchParams['tag_exclusion']) {
                    $dql->andwhere('( tag.id is null or tag.id  NOT IN (' . implode(',', $searchParams['tagIds']) . ') or reptag.id is null or reptag.id  NOT IN (' . implode(',', $searchParams['tagIds']) . '))');
                } else {
                    $dql->andwhere('tag.id  IN (' . implode(',', $searchParams['tagIds']) . ') or reptag.id  IN (' . implode(',', $searchParams['tagIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['groupIds']) && count($searchParams['groupIds']) > 0) {
                $dql->leftJoin('r.groups', 'g');
                if (isset($searchParams['group_exclusion']) && 'on' == $searchParams['group_exclusion']) {
                    // récupération des r.id associés aux groupes à exclure
                    $subQueryBuilder = $this->createQueryBuilder('r')
                    ->select('r.id')
                    ->distinct()
                    ->leftJoin('r.groups', 'g')
                    ->where('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                    $subQueryResult = $subQueryBuilder->getQuery()->getScalarResult();
                    $excludeIds = array_column($subQueryResult, 'id');
                    if (($excludeIds !== []) > 0) {
                        $dql->andwhere('( r.id  NOT IN (' . implode(',', $excludeIds) . ') )');
                    }
                } else {
                    $dql->andwhere('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['mandateTypeIds']) && count($searchParams['mandateTypeIds']) > 0) {
                if (isset($searchParams['mandateType_exclusion']) && 'on' == $searchParams['mandateType_exclusion']) {
                    $dql->andwhere('( mt.id is null or mt.id  NOT IN (' . implode(',', $searchParams['mandateTypeIds']) . ') )');
                } else {
                    $dql->andwhere('mt.id IN (' . implode(',', $searchParams['mandateTypeIds']) . ')');
                }

                $eligibaleCriteria = true;
            }
            if (isset($searchParams['serviceIds']) && count($searchParams['serviceIds']) > 0) {
                if (isset($searchParams['service_exclusion']) && 'on' == $searchParams['service_exclusion']) {
                    $dql->andwhere('( s.id is null or s.id  NOT IN (' . implode(',', $searchParams['serviceIds']) . ') )');
                } else {
                    $dql->andwhere('s.id  IN (' . implode(',', $searchParams['serviceIds']) . ')');
                }
                $eligibaleCriteria = true;
            }
            if (isset($searchParams['professionIds']) && count($searchParams['professionIds']) > 0) {
                $dql->leftJoin('p.profession', 'prof');
                if (isset($searchParams['profession_exclusion']) && 'on' == $searchParams['profession_exclusion']) {
                    $dql->andwhere('( prof.id is null or prof.id  NOT IN (' . implode(',', $searchParams['professionIds']) . ') )');
                } else {
                    $dql->andwhere('prof.id IN (' . implode(',', $searchParams['professionIds']) . ')');
                }
            }
            if (isset($searchParams['maxUpdatedDate']) && '' != $searchParams['maxUpdatedDate']) {
                $maxDate = new \DateTime($searchParams['maxUpdatedDate']);
                $dql->andWhere("r.updated <='". $maxDate->format('Y-m-d')."'");
            }
            if (isset($searchParams['observation']) && '' != $searchParams['observation']) {
                $dql->andWhere('o.observation LIKE \'%' . str_replace('\'', '_', $searchParams['observation']) . '%\'');
                $eligibaleCriteria = true;
            }
            
            if (isset($searchParams['createdByEntitiesIds']) && count($searchParams['createdByEntitiesIds']) > 0) {
                $dql->leftJoin('r.entity', 'entity');
                $dql->andwhere('entity.id IN (' . implode(',', $searchParams['createdByEntitiesIds']) . ') AND r.isShared=1');
                $entityId = null;
            }
        }
        if ($entityId) {
            $dql->leftJoin('r.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND r.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations)) {
            if (array_key_exists('organizationTypeIds', $readerLimitations) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }

        if (!$eligibaleCriteria && !$fromApi) {
            // on ne souhaite pas afficher de representations
            $dql->andWhere('1=0');
        }

        return $this->_em->createQuery($dql);
    }

    public function getListForSelection($representationIds, $personIds = null, $pfoIds = null, $cleanDuplicates = true)
    {
        $dql = $this->createQueryBuilder('r')
            ->select('r, pfo, p, o, coord, evt, rep, mt, c, ety, o2')
            ->leftJoin('r.pfo', 'pfo')
            ->leftJoin('r.person', 'p')
            ->leftJoin('r.entity', 'ety')
            ->leftJoin('r.organization', 'o')
            ->leftJoin('r.coordinate', 'coord')
            ->leftJoin('coord.organization', 'o2')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            ->leftJoin('r.mandateType', 'mt')
            ->leftJoin('coord.city', 'c')
            ->where('r.deletedAt IS NULL')
            ->orderby('r.name', 'ASC')
        ;
        if (is_array($representationIds) && count($representationIds)) {
            $dql->andwhere('r.id IN (' . implode(',', $representationIds) . ')');
        }
        if ($cleanDuplicates) {
            $dql->addGroupBy('pfo.id')
              ->addGroupBy('p.id')
              ->addGroupBy('o.id')
              ->addGroupBy('c.id')
              ->addGroupBy('mt.id')
            ;
        }

        // afin d'eviter les doublons on retire les person et pfo déjà retenus
        if ($cleanDuplicates && ((is_array($personIds) && count($personIds)) || (is_array($pfoIds) && count($pfoIds)))) {
            if (is_array($personIds) && count($personIds)) {
                $dql->leftJoin('pfo.person', 'pfoPerson')
                ->andWhere('p.id not IN (' . implode(',', $personIds) . ')')
                ->andWhere('pfoPerson.id not IN (' . implode(',', $personIds) . ')')
                ;
            }
            if (is_array($pfoIds) && count($pfoIds)) {
                $dql->andWhere('pfo.id not IN (' . implode(',', $pfoIds) . ')');
            }
        }

        return $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null, $currentUser = null)
    {
        if ($ids) {
            // first query for hard delete
            $hardDql = $this->createQueryBuilder('r')->delete('PostparcBundle\Entity\Representation r')->where('r.id IN (' . implode(',', $ids) . ')');
            $hardDql->andWhere('r.deletedAt IS NOT NULL');
            // suppression des coordonnées associées
            $entitiesToBeDeleteDql = $this->createQueryBuilder('r')->select('r')->where('r.id IN (' . implode(',', $ids) . ')')->andWhere('r.deletedAt IS NOT NULL');

            // second qurey for soft delete
            $now = new \Datetime();
            $softDql = $this->createQueryBuilder('r')->update('PostparcBundle\Entity\Representation r')
              ->set('r.deletedAt', "'" . $now->format('Y-m-d H:i:s') . "'")
              ->where('r.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $hardDql->andWhere('r.entity=' . $entityId);
                $softDql->andWhere('r.entity=' . $entityId);
                $entitiesToBeDeleteDql->andWhere('r.entity=' . $entityId);
            }

            // suppression des coordonnées associées
            $entitiesToBeDelete = $this->_em->createQuery($entitiesToBeDeleteDql)->getResult();
            $havetoBeFlush = false;
            foreach ($entitiesToBeDelete as $entity) {
                $coordinate = $entity->getCoordinate();
                if ($coordinate) {
                    $email = $coordinate->getEmail();
                    $this->_em->remove($coordinate);
                    if ($email) {
                        $this->_em->remove($email);
                    }
                }
                $havetoBeFlush = true;
            }
            if ($havetoBeFlush) {
                $this->_em->flush();
            }

            if ($currentUser) {
                $softDql->set('r.deletedBy', $currentUser->getId());
            }

            //queries execution
            $this->_em->createQuery($hardDql)->execute();
            $this->_em->createQuery($softDql)->execute();
        }
    }

    public function batchRestore($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('r')->update('PostparcBundle\Entity\Representation r')
              ->set('r.deletedAt', 'NULL')
              ->set('r.deletedBy', 'NULL')
              ->where('r.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('r.entity=' . $entityId);
            }
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function getTrashedElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('r')->select('r')
            ->where('r.deletedAt IS NOT NULL')
            ->orderBy('r.slug', 'ASC');
        if ($entityId) {
            $dql->andWhere('r.entity=' . $entityId);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function representationIdsInEvent($eventId)
    {
        $dql = $this->createQueryBuilder('r')
            ->select('r.id')
            ->leftJoin('r.eventRepresentations', 'rr')
            ->leftJoin('rr.event', 'e')
            ->where('e.id=' . $eventId)
            ->andWhere('r.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function representationIdsInGroup($groupId)
    {
        $dql = $this->createQueryBuilder('r')
            ->select('r.id')
            ->leftjoin('r.groups', 'g')
            ->where('g.id=' . $groupId)
            ->andWhere('r.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function listRepresentationGroupQuery($groupId)
    {
        $dql = $this->createQueryBuilder('r')
            ->leftJoin('r.groups', 'g')
            ->where('g.id=' . $groupId)
            ->andWhere('r.deletedAt IS NULL')
        ;

        return $this->_em->createQuery($dql);
    }

    /**
     * get active en visible representations for one person
     * @param type $personId
     * @param type $entityId
     * @param type $show_SharedContents
     * @return type
     */
    public function getPersonRepresentations($personId, $entityId, $show_SharedContents)
    {
        $dql = $this->createQueryBuilder('r')
            ->leftJoin('r.person', 'p')
            ->where('r.deletedAt IS NULL')
            ->andWhere('p.id=' . $personId)
            ->orderBy('r.slug', 'ASC');
        if ($entityId) {
            $dql->leftJoin('r.entity', 'entityRep');
            $dql->leftJoin('p.entity', 'entityPers');
            if ($show_SharedContents) {
                $dql->andWhere('entityRep.id=' . $entityId . ' OR (entityRep.id!=' . $entityId . ' AND r.isShared=1)');
                $dql->andWhere('entityPers.id=' . $entityId . ' OR (entityPers.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entityRep.id=' . $entityId . '');
                $dql->andWhere('entityPers.id=' . $entityId . '');
            }
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function listRepresentationSubGroupQuery($childrens)
    {
        $dql = $this->createQueryBuilder('r')
            ->where('r.deletedAt IS NULL')
            ->leftJoin('r.groups', 'g')
        ;
        $groupId = [];
        foreach ($childrens as $group) {
            $groupId[] = $group->getId();
        }
        $dql->andWhere('g.id IN (' . implode(',', $groupId) . ')');

        return $this->_em->createQuery($dql);
    }

    public function getRepresentationWithoutEmails($repIds)
    {
        $dql = $this->createQueryBuilder('rep')
            ->leftJoin('rep.pfo', 'pfo')
            ->leftjoin('pfo.email', 'pfoEmail')
            ->leftJoin('rep.person', 'p')
            ->leftJoin('rep.preferedEmail', 'reppreferedEmails')
            ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
            ->leftJoin('rep.organization', 'org')
            ->leftJoin('org.coordinate', 'coordOrg')
            ->leftJoin('p.coordinate', 'coordPers')
            ->leftJoin('coordPers.email', 'emailPers')
            ->leftJoin('coordOrg.email', 'emailOrg')
            ->where('rep.id IN (' . implode(',', $repIds) . ')')
            ->andWhere('rep.deletedAt IS NULL')
            ->andWhere('pfoEmail.id IS NULL')
            ->andWhere('pfopreferedEmails.id IS NULL')
            ->andWhere('reppreferedEmails.id IS NULL')
            ->andWhere('pfoEmail.id IS NULL')
            ->andWhere('emailOrg.id IS NULL')
            ->andWhere('emailPers.id IS NULL')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
    
    public function getEventRepresentationWithoutEmails($event)
    {
        $dql = $this->createQueryBuilder('rep')
            ->leftJoin('rep.eventRepresentations', 'ep')    
            ->leftJoin('rep.pfo', 'pfo')
            ->leftjoin('pfo.email', 'pfoEmail')
            ->leftJoin('rep.person', 'p')
            ->leftJoin('rep.preferedEmail', 'reppreferedEmails')
            ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
            ->leftJoin('rep.organization', 'org')
            ->leftJoin('org.coordinate', 'coordOrg')
            ->leftJoin('p.coordinate', 'coordPers')
            ->leftJoin('coordPers.email', 'emailPers')
            ->leftJoin('coordOrg.email', 'emailOrg')
            ->where('ep.event = '.$event->getId())
            ->andWhere('rep.deletedAt IS NULL')
            ->andWhere('pfoEmail.id IS NULL')
            ->andWhere('pfopreferedEmails.id IS NULL')
            ->andWhere('reppreferedEmails.id IS NULL')
            ->andWhere('pfoEmail.id IS NULL')
            ->andWhere('emailOrg.id IS NULL')
            ->andWhere('emailPers.id IS NULL')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }        

    public function getEventRepresentations(Event $event, EventAlert $eventAlert = null)
    {
        $dql = $this->createQueryBuilder('rep')
            ->select('rep')
            ->leftJoin('rep.eventRepresentations', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id = ' . $event->getId())
        ;
        if ($eventAlert !== null) {
            if ($eventAlert->getOnlyForConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NOT NULL OR ep.representedBy IS NOT NULL');
            }
            if ($eventAlert->getOnlyForUnConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NULL AND ep.representedBy IS NULL');
            }
        }
        $query = $this->_em->createQuery($dql);
        //echo $query->getSQL();die;

        return $query->getResult();
    }
}
