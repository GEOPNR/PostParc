<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CoordinateRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoordinateRepository extends EntityRepository
{
    /**
     * list possible coordinates for prefered coordinate form's field.
     *
     * @param type $pfo
     *
     * @return type
     */
    public function retrievePossiblePfoCoordinates($pfo)
    {
        $dql = $this->createQueryBuilder('c')
                ->leftJoin('c.organization', 'o')
                ->leftJoin('o.pfos', 'pfo')
                ->where('pfo.id=' . $pfo->getId())
        ;
        if ($pfo->getOrganization()) {
            $dql->orWhere('o.id=' . $pfo->getOrganization()->getId());
        }
        if ($pfo->getPerson()) {
            $person = $pfo->getPerson();
            $dql->leftJoin('c.persons', 'p')
                    ->orWhere('p.id=' . $person->getId() . '  AND p.deletedAt IS NULL AND p.dontWantToBeContacted!=1')
            ;
            //recherche des adresses de tous les organismes associés à la personnes
            if (count($person->getPfos()) > 1) {
                $otherCoordinatePfosIds = [];
                foreach ($person->getPfos() as $otherpfo) {
                    if ($otherpfo->getId() != $pfo->getId() && $otherpfo->getOrganization() && $otherpfo->getOrganization()->getCoordinate()) {
                        $otherCoordinatePfosIds[] = $otherpfo->getOrganization()->getCoordinate()->getId();
                    }
                }
                if (($otherCoordinatePfosIds !== []) > 0) {
                    $dql->orWhere('c.id IN (' . implode(',', $otherCoordinatePfosIds) . ')');
                }
            }
        }
        $dql->distinct();

        return $dql;
    }

    /**
     * list possible coordinates for prefered coordinate form's field.
     *
     * @param type $pfo
     *
     * @return type
     */
    public function retrievePossibleRepresentationCoordinates($representation)
    {
        $dql = $this->createQueryBuilder('c')
                ->leftJoin('c.representation', 'rep')
                ->innerJoin('c.city', 'city')
                ->where('rep.id=' . $representation->getId())
                ->andWhere('c.addressLine1 IS NOT NULL')
        ;
        if ($representation->getOrganization()) {
            $dql->leftJoin('c.organization', 'o')->orWhere('o.id=' . $representation->getOrganization()->getId());
        }
        if ($representation->getPerson()) {
            $dql->leftJoin('c.persons', 'p')->orWhere('p.id=' . $representation->getPerson()->getId() . '  AND p.deletedAt IS NULL AND p.dontWantToBeContacted!=1');
        }
        if ($representation->getPfo()) {
            $dql->leftJoin('c.pfosPreferedCoordinateAddress', 'pfo')->orWhere('pfo.id=' . $representation->getPfo()->getId());
        }
        $dql->distinct();

        return $dql;
    }

    /**
     * list possible coordinates for prefered coordinate form's field.
     *
     * @param type $person
     *
     * @return type
     */
    public function retrievePossiblePersonCoordinates($person)
    {
        $dql = $this->createQueryBuilder('c')
                ->leftJoin('c.persons', 'p')
                ->leftJoin('c.organization', 'o')
                ->leftJoin('o.pfos', 'pfo')
                ->leftJoin('pfo.person', 'p2')
                ->where('p.id=' . $person->getId())
                ->orwhere('p2.id=' . $person->getId())
        ;

        //recherche des adresses de tous les organismes associés à la personnes
        if (count($person->getPfos()) > 1) {
            $otherCoordinatePfosIds = [];
            foreach ($person->getPfos() as $pfo) {
                if ($pfo->getOrganization() && $pfo->getOrganization()->getCoordinate()) {
                    $otherCoordinatePfosIds[] = $pfo->getOrganization()->getCoordinate()->getId();
                }
            }
            if (($otherCoordinatePfosIds !== []) > 0) {
                $dql->orWhere('c.id IN (' . implode(',', $otherCoordinatePfosIds) . ')');
            }
        }

        $dql->distinct();

        return $dql;
    }

    /**
     * query to delete one coordinate.
     *
     * @param type $id
     *
     * @return type
     */
    public function delete($id = null)
    {
        if ($id !== null) {
            $dql = $this->createQueryBuilder('g')->delete('PostparcBundle\Entity\Coordinate c')->where('c.id=' . $id);

            return $query = $this->_em->createQuery($dql)->execute();
        }
    }

    /**
     * query to retrieve all coordinates withour geolocation infos.
     *
     * @param type $limit
     *
     * @return type
     */
    public function findCoordinatesWithNoGeolocalizationInfos($limit = 5, $coordinateID = null)
    {
        $dql = $this->createQueryBuilder('c')
                ->andwhere('c.city is not null')
                ->andWhere('c.coordinate is null')
                ->orderBy('c.id', 'desc');

        if ($coordinateID) {
            $dql->andWhere('c.id=' . $coordinateID);
        }

        $q = $this->_em->createQuery($dql);

        $q->setMaxResults($limit);

        return $q->getResult();
    }

    public function getCoordinateWithUnValidCoordinate()
    {
        $dql = $this->createQueryBuilder('c')
                ->leftJoin('c.city', 'city')
                ->where('c.coordinate IS NOT NULL')
                ->andwhere('c.addressLine1 IS NULL')
                ->andwhere('c.addressLine2 IS NULL')
                ->andwhere('c.addressLine3 IS NULL')
                ->andwhere('city.id IS NULL OR (city.id IS NOT NULL AND city.coordinate IS NULL)')
        ;

        $q = $this->_em->createQuery($dql);

        return $q->getResult();
    }
}
