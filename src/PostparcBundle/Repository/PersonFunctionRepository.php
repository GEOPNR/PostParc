<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Cocur\Slugify\Slugify;

/**
 * ServiceRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonFunctionRepository extends EntityRepository
{
    public function search($filter)
    {
        //TODO gérer les value vide
        $dql = $this->createQueryBuilder('pf')->select('pf');

        $slugify = new Slugify();
        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere("(pf.slug LIKE '%" . $slug . "%' OR pf.name LIKE '%" . str_replace("'","_",$filter['name']) . "%')");
        }
        (array_key_exists('womenName', $filter) && $filter['womenName']) ? $dql->andwhere("pf.womenName LIKE '%" . str_replace("'","_",$filter['womenName']) . "%'") : '';
        (array_key_exists('menParticle', $filter) && $filter['menParticle']) ? $dql->andwhere("pf.menParticle LIKE '%" . str_replace("'","_",$filter['menParticle']) . "%'") : '';
        (array_key_exists('womenParticle', $filter) && $filter['womenParticle']) ? $dql->andwhere("pf.womenParticle LIKE '%" . str_replace("'","_",$filter['womenParticle']) . "%'") : '';

        (array_key_exists('orderBy', $filter)) ? $dql->orderBy($filter['orderBy']['field'], $filter['orderBy']['direction']) : '';
        //$dql->orderBy('c.id', 'DESC'); // Order par défault

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('pf')->delete('PostparcBundle\Entity\PersonFunction pf')->where('pf.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('pf.entity=' . $entityId);
            }

            //queries execution
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function autoComplete($q, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('pf')
            ->orderby('pf.name', 'ASC')
        ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q,    '-');
            $dql->andwhere('pf.slug LIKE \'%' . $slug . '%\'');
            $dql->orwhere('pf.womenName LIKE \'%' . str_replace("'","_",$q) . '%\'');
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function getKeyPair()
    {
        $dql = 'SELECT pf.id, pf.name FROM person_function pf ORDER BY pf.name';
        $stmt = $this->getEntityManager()->getConnection()->prepare($dql);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
    }


    public function searchDuplicateElements()
    {
        $dql = $this->createQueryBuilder('pf')
        ->select('pf as object, count(pf) as nb')
        ->groupBy('pf.name')
        ->orderBy('nb', 'DESC')
        ->having('nb > 1')
        ;

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getDuplicatesElements($object, $exludeId = null)
    {
        $dql = $this->createQueryBuilder('pf')
        ->select('pf')
        ->where('pf.name LIKE \'' . str_replace("'", "_", $object->getName()) . '\'');
        if ($exludeId) {
            $dql->andWhere('pf.id != ' . $exludeId . '');
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
}
