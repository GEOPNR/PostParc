<?php

namespace PostparcBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Cocur\Slugify\Slugify;

/**
 * EntityRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityRepository extends NestedTreeRepository
{
    /**
     * @param type $filter
     *
     * @return type
     */
    public function search($filter)
    {
        $dql = $this->createQueryBuilder('e')->select('e.id, e.level, e.name, e.root, e.lft, e.rgt, e.slug, u.id as creatorId, u.username')
                ->where('e.deletedAt IS NULL')
                ->leftJoin('e.createdBy', 'u')
                ->orderBy('e.root, e.lft', 'ASC');
        $slugify = new Slugify();
        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('e.slug LIKE \'%' . $slug . '%\'');
        }
        (array_key_exists('updatedBy', $filter) && $filter['updatedBy']) ? $dql->andwhere("e.updatedBy = '" . $filter['updatedBy'] . "'") : '';

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null, $currentUser = null)
    {
        if ($ids) {
            // first query for hard delete
            $hardDql = $this->createQueryBuilder('e')->delete('PostparcBundle\Entity\Entity e')->where('e.id IN (' . implode(',', $ids) . ')');
            $hardDql->andWhere('e.deletedAt IS NOT NULL');

            // second query for soft delete
            $now = new \Datetime();
            $softDql = $this->createQueryBuilder('e')->update('PostparcBundle\Entity\Entity e')
                    ->set('e.deletedAt', "'" . $now->format('Y-m-d H:i:s') . "'")
                    ->where('e.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $hardDql->andWhere('e.entity=' . $entityId);
                $softDql->andWhere('e.entity=' . $entityId);
            }

            if ($currentUser) {
                $softDql->set('e.deletedBy', $currentUser->getId());
            }

            //queries execution
            $this->_em->createQuery($hardDql)->execute();
            $this->_em->createQuery($softDql)->execute();
        }
    }

    public function batchRestore($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('r')->update('PostparcBundle\Entity\Entity e')
                    ->set('e.deletedAt', 'NULL')
                    ->set('e.deletedBy', 'NULL')
                    ->where('e.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('e.entity=' . $entityId);
            }
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function getTrashedElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('e')->select('e')
                ->where('e.deletedAt IS NOT NULL')
                ->orderBy('e.slug', 'ASC');
        if ($entityId) {
            $dql->andWhere('e.id=' . $entityId);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function autoComplete($q)
    {
        $dql = $this->createQueryBuilder('e')
            ->where('e.deletedAt IS NULL')
            ->andWhere('e.parent IS NOT NULL')    
            ->orderby('e.name', 'ASC')
            ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q, '-');
            $dql->andwhere('e.slug LIKE \'%' . $slug . '%\'');
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults(60);

        return $query->getResult();
    }
}
