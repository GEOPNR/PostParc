<?php

namespace PostparcBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Cocur\Slugify\Slugify;

/**
 * MandateTypeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MandateTypeRepository extends NestedTreeRepository
{
    public function search($filter)
    {
        $dql = $this->createQueryBuilder('mt')->select('mt.id, mt.level, mt.name, mt.root, mt.lft, mt.rgt, mt.slug, u.id as creatorId, u.username')
            ->leftJoin('mt.createdBy', 'u')
            ->orderBy('mt.root, mt.lft', 'ASC');
        $slugify = new Slugify();
        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('mt.slug LIKE \'%' . $slug . '%\'');
        }
        (array_key_exists('updatedBy', $filter) && $filter['updatedBy']) ? $dql->andwhere("mt.updatedBy = '" . $filter['updatedBy'] . "'") : '';

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('mt')->delete('PostparcBundle\Entity\MandateType mt')->where('mt.id IN (' . implode(',', $ids) . ')');

            return $query = $this->_em->createQuery($dql)->execute();
        }
    }

    public function autoComplete($q, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('mt')
            ->orderby('mt.name', 'ASC')
        ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q, '-');
            $dql->andwhere('mt.slug LIKE \'%' . $slug . '%\'');
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }
}
