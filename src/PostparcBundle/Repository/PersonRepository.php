<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use PostparcBundle\Entity\Event;
use PostparcBundle\Entity\Tag;
use PostparcBundle\Entity\EventAlert;
use Cocur\Slugify\Slugify;
use PostparcBundle\Repository\TagRepository;
use Doctrine\ORM\EntityManagerInterface;

/**
 * ServiceRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonRepository extends EntityRepository
{
      
    
    public function search($filter, $entityId = null, $show_SharedContents = true)
    {
        $slugify = new Slugify();
        $dql = $this->createQueryBuilder('p')
            ->select('p,c,e,city, ety, o, rep, evt')
            ->leftJoin('p.coordinate', 'c')
            ->leftJoin('c.organization', 'o')
            ->leftJoin('c.representation', 'rep')
            ->leftJoin('c.event', 'evt')
            ->leftJoin('c.city', 'city')
            ->leftJoin('c.email', 'e')
            ->leftJoin('p.profession', 'prof')
            ->leftJoin('p.entity', 'ety')
            ->where('p.deletedAt IS NULL')
        ;

        if (array_key_exists('name', $filter) && $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('p.slug LIKE \'%' . $slug . '%\'');
        }

        if (array_key_exists('city', $filter) && $filter['city']) {
            $dql->andwhere('city.id =' . $filter['city']);
        }

        if (array_key_exists('profession', $filter) && $filter['profession']) {
            $dql->andwhere('prof.id =' . $filter['profession']);
        }
        if (array_key_exists('tags', $filter) && $filter['tags']) {
            $tagIds = [];

            foreach ($filter['tags'] as $tag) {
                $tagIds[] = $tag->getId();
                // search in sub tags
                $subTags = $this->getEntityManager()->getRepository('PostparcBundle\Entity\Tag')->getChildren($node = $tag, $direct = false, $sortByField = null, $direction = 'asc', $includeNode = true);
                foreach ($subTags as $subTag) {
                    $tagIds[] = $subTag->getId();
                }
            }
            if (($tagIds !== []) > 0) {
                $dql->leftJoin('p.tags', 't');
                $dql->andWhere('t.id IN (' . implode(',', $tagIds) . ')');
            }
        }
        if (isset($filter['updatedBy']) && $filter['updatedBy']) {
            $dql->andwhere("p.updatedBy = '" . $filter['updatedBy'] . "'");
        }

        if ($entityId) {
            $dql->leftJoin('p.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        (array_key_exists('orderBy', $filter)) ? $dql->orderBy($filter['orderBy']['field'], $filter['orderBy']['direction']) : '';

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null, $currentUser = null)
    {
        if ($ids) {
            // first query for hard delete
            $hardDql = $this->createQueryBuilder('p')->delete('PostparcBundle\Entity\Person  p')->where('p.id IN (' . implode(',', $ids) . ')');
            $hardDql->andWhere('p.deletedAt IS NOT NULL');
            // suppression des coordonnées associées
            $entitiesToBeDeleteDql = $this->createQueryBuilder('p')->select('p')->where('p.id IN (' . implode(',', $ids) . ')')->andWhere('p.deletedAt IS NOT NULL');

            // second query for soft delete
            $now = new \Datetime();
            $softDql = $this->createQueryBuilder('p')->update('PostparcBundle\Entity\Person p')
              ->set('p.deletedAt', "'" . $now->format('Y-m-d H:i:s') . "'")
              ->where('p.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $hardDql->andWhere('p.entity=' . $entityId);
                $softDql->andWhere('p.entity=' . $entityId);
                $entitiesToBeDeleteDql->andWhere('p.entity=' . $entityId);
            }

            // suppression des coordonnées associées
            $entitiesToBeDelete = $this->_em->createQuery($entitiesToBeDeleteDql)->getResult();
            $havetoBeFlush = false;
            foreach ($entitiesToBeDelete as $entity) {
                $coordinate = $entity->getCoordinate();
                if ($coordinate) {
                    $email = $coordinate->getEmail();
                    $this->_em->remove($coordinate);
                    if ($email) {
                        $this->_em->remove($email);
                    }
                }
                $havetoBeFlush = true;
            }
            if ($havetoBeFlush) {
                $this->_em->flush();
            }

            if ($currentUser) {
                $softDql->set('p.deletedBy', $currentUser->getId());
            }

            //queries execution
            $this->_em->createQuery($hardDql)->execute();
            $this->_em->createQuery($softDql)->execute();
        }
    }

    public function batchRestore($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('p')->update('PostparcBundle\Entity\Person p')
              ->set('p.deletedAt', 'NULL')
              ->set('p.deletedBy', 'NULL')
              ->where('p.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('p.entity=' . $entityId);
            }
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function getTrashedElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('p')->select('p')
            ->where('p.deletedAt IS NOT NULL')
            ->orderBy('p.slug', 'ASC');
        if ($entityId) {
            $dql->andWhere('p.entity=' . $entityId);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function autoComplete($q, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('p')->select('p')
            ->where('p.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;
        if ($q) {
            $dql->andWhere("p.name LIKE '%" . addslashes($q) . "%' OR p.firstName LIKE '%" . addslashes($q) . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('p.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function autoCompleteForEvent($eventId, $term, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('p')
            ->leftJoin('p.eventPersons', 'ep')
            ->leftjoin('ep.event', 'evt')
            ->where('evt.id is null or evt.id!=' . $eventId)
            ->andWhere('p.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;
        if ($term) {
            $dql->andWhere("p.name LIKE '%" . addslashes($term) . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('p.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function simpleSearch($q, $entityId = null, $show_SharedContents = true)
    {
        $slugify = new Slugify();
        $slug = $slugify->slugify($q, '-');
        $dql = $this->createQueryBuilder('p')
            ->select('p, c, city, e, evt, rep, entity')
            ->leftJoin('p.coordinate', 'c')
            ->leftJoin('c.representation', 'rep')
            ->leftJoin('c.event', 'evt')
            ->leftJoin('c.email', 'e')
            ->leftJoin('c.city', 'city')
            ->leftJoin('p.entity', 'entity')
            ->where('p.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;
        if ($q) {
            $q = addslashes(str_replace("'", '', $q));
            $dql->leftJoin('rep.coordinate', 'repCoord');
            $dql->leftJoin('repCoord.email', 'repCoordEmail');

            $orCondition = "p.name LIKE '%" . $q . "%' OR p.firstName LIKE '%" . $q . "%'";
            if (strlen(preg_replace('/\D+/', '', $q)) > 6 && 0 == substr_count($q, '@')) {
                $orCondition .= " OR c.phone LIKE '%" . preg_replace('/\D+/', '', $q) . "%' OR c.mobilePhone LIKE '%" . preg_replace('/\D+/', '', $q) . "%'";
            }
            $orCondition .= " OR e.email LIKE '%" . $q . "%'";
            $orCondition .= " OR repCoordEmail.email LIKE '%" . $q . "%'";
            $orCondition .= " OR p.slug LIKE '%" . $slug . "%'";
            // inverse slug
            $reverseSlug = implode('-',array_reverse(explode('-', $slug)));
            $orCondition .= " OR p.slug LIKE '%" . $reverseSlug . "%'";
            
            $dql->andWhere($orCondition);
        }
        if ($entityId) {
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        return $this->_em->createQuery($dql);
    }

    public function advancedSearch($searchParams, $entityId = null, $readerLimitation = null, $show_SharedContents = true)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p, c, e, city, entity, o, rep, evt, tag')
            ->distinct()
            ->leftJoin('p.coordinate', 'c')
            ->leftJoin('c.organization', 'o')
            ->leftJoin('c.representation', 'rep')
            ->leftJoin('c.event', 'evt')
            ->leftJoin('p.entity', 'entity')
            ->leftJoin('c.email', 'e')
            ->leftJoin('c.city', 'city')
            ->leftJoin('city.territories', 'territory')
            ->leftJoin('p.pfoPersonGroups', 'ppg')
            ->leftjoin('ppg.group', 'g')
            ->leftJoin('p.tags', 'tag')
            ->where('p.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;

        if (count(array_filter($searchParams)) > 1) {
            if (isset($searchParams['name'])) {
                $dql->andWhere("p.name LIKE '%" . addslashes($searchParams['name']) . "%'");
            }
            if (isset($searchParams['cityIds']) && count($searchParams['cityIds']) > 0) {
                if (isset($searchParams['city_exclusion']) && 'on' == $searchParams['city_exclusion']) {
                    $dql->andwhere('( city.id is null or city.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ') )');
                } else {
                    $dql->andwhere('city.id  IN (' . implode(',', $searchParams['cityIds']) . ')');
                }
            }
            if (isset($searchParams['departmentIds']) && count($searchParams['departmentIds']) > 0) {
                $slugs = "'" . implode("','", $searchParams['departmentIds']) . "'";
                if (isset($searchParams['department_exclusion']) && 'on' == $searchParams['department_exclusion']) {
                    $dql->andwhere("( city.slugDepartment is null or city.slugDepartment NOT IN ($slugs) )");
                } else {
                    $dql->andwhere("city.slugDepartment IN ($slugs)");
                }
            }

            if (isset($searchParams['groupIds']) && count($searchParams['groupIds']) > 0) {
                if (isset($searchParams['group_exclusion']) && 'on' == $searchParams['group_exclusion']) {
                    // récupération des p.id associés aux groupes à exclure
                    $subQueryBuilder = $this->createQueryBuilder('p')
                    ->select('p.id')
                    ->distinct()
                    ->leftJoin('p.pfoPersonGroups', 'ppg')
                    ->leftjoin('ppg.group', 'g')
                    ->where('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                    $subQueryResult = $subQueryBuilder->getQuery()->getScalarResult();
                    $excludeIds = array_column($subQueryResult, 'id');
                    if (($excludeIds !== []) > 0) {
                        $dql->andwhere('( p.id  NOT IN (' . implode(',', $excludeIds) . ') )');
                    }
                } else {
                    $dql->andwhere('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                    $dql->andwhere('g.deletedAt IS NULL');
                }
            }
            if (isset($searchParams['territoryIds']) && count($searchParams['territoryIds']) > 0) {
                if (isset($searchParams['territory_exclusion']) && 'on' == $searchParams['territory_exclusion']) {
                    $dql->andwhere('( territory.id is null or territory.id  NOT IN (' . implode(',', $searchParams['territoryIds']) . ') )');
                } else {
                    $dql->andwhere('territory.id  IN (' . implode(',', $searchParams['territoryIds']) . ')');
                    $dql->andwhere('territory.deletedAt IS NULL');
                }
            }
            if (isset($searchParams['mandateTypeIds']) && count($searchParams['mandateTypeIds']) > 0) {
                $dql->leftJoin('p.representations', 'reps')
                ->leftJoin('reps.mandateType', 'mt')
                ->andWhere('reps.deletedAt IS NULL');
                if (isset($searchParams['mandateType_exclusion']) && 'on' == $searchParams['mandateType_exclusion']) {
                    $dql->andwhere('( mt.id is null or mt.id  NOT IN (' . implode(',', $searchParams['mandateTypeIds']) . ') )');
                } else {
                    $dql->andwhere('mt.id IN (' . implode(',', $searchParams['mandateTypeIds']) . ')');
                }
            }
            if (isset($searchParams['professionIds']) && count($searchParams['professionIds']) > 0) {
                $dql->leftJoin('p.profession', 'prof');
                if (isset($searchParams['profession_exclusion']) && 'on' == $searchParams['profession_exclusion']) {
                    $dql->andwhere('( prof.id is null or prof.id  NOT IN (' . implode(',', $searchParams['professionIds']) . ') )');
                } else {
                    $dql->andwhere('prof.id IN (' . implode(',', $searchParams['professionIds']) . ')');
                }
            }
            if (isset($searchParams['tagIds']) && count($searchParams['tagIds']) > 0) {
                if (isset($searchParams['tag_exclusion']) && 'on' == $searchParams['tag_exclusion']) {
                    // récupération des person.id associés aux tags à exclure
                    $subQueryBuilder = $this->createQueryBuilder('p')
                    ->select('p.id')
                    ->distinct()
                    ->leftJoin('p.tags', 'tag')
                    ->where('tag.id  IN (' . implode(',', $searchParams['tagIds']) . ')');
                    $subQueryResult = $subQueryBuilder->getQuery()->getScalarResult();
                    $excludeIds = array_column($subQueryResult, 'id');
                    if (($excludeIds !== []) > 0) {
                        $dql->andwhere('( p.id  NOT IN (' . implode(',', $excludeIds) . ') )');
                    }
                } else {
                    $dql->andwhere('tag.id  IN (' . implode(',', $searchParams['tagIds']) . ')');
                }
            }
            if (isset($searchParams['maxUpdatedDate']) && '' != $searchParams['maxUpdatedDate']) {
                $maxDate = new \DateTime($searchParams['maxUpdatedDate']);
                $dql->andWhere("p.updated <='". $maxDate->format('Y-m-d')."'");
            }
            if (isset($searchParams['observation']) && '' != $searchParams['observation']) {
                $dql->andWhere('p.observation LIKE \'%' . str_replace('\'', '_', $searchParams['observation']) . '%\'');
            }
            
            if (isset($searchParams['createdByIds']) && count($searchParams['createdByIds']) > 0) {
                $dql->andwhere('p.createdBy  IN (' . implode(',', $searchParams['createdByIds']) . ')');
            }

            if (array_key_exists('onlyWithEmail', $searchParams) && $searchParams['onlyWithEmail']) {
                $dql->andwhere('e.email != \'\'');
            }
            
            if (isset($searchParams['createdByEntitiesIds']) && count($searchParams['createdByEntitiesIds']) > 0) {
                $dql->andwhere('entity.id IN (' . implode(',', $searchParams['createdByEntitiesIds']) . ') AND p.isShared=1');
                $entityId = null;
            }
            
        }

        if ($entityId) {
            $dql->andwhere('entity.deletedAt IS NULL');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        return $this->_em->createQuery($dql);
    }

    public function getListForSelection($personIds, $action = 'list')
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p,c,e,city, ety, o, rep, evt')
            ->leftJoin('p.coordinate', 'c')
            ->leftJoin('c.organization', 'o')
            ->leftJoin('c.representation', 'rep')
            ->leftJoin('c.event', 'evt')
            ->leftJoin('c.city', 'city')
            ->leftJoin('c.email', 'e')
            ->leftJoin('p.profession', 'prof')
            ->leftJoin('p.entity', 'ety')
            ->where('p.id IN (' . implode(',', $personIds) . ')')
            ->andWhere('p.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;
        if ('list' !== $action) {
            $dql->andWhere('p.dontWantToBeContacted !=1 ');
        }

        return $this->_em->createQuery($dql);
    }

    public function getPersonWithoutEmails($personIds)
    {
        $dql = $this->createQueryBuilder('p')
            ->leftjoin('p.preferedEmails', 'prefEmails')
            ->leftJoin('p.coordinate', 'coord')
            ->leftJoin('coord.email', 'email')
            ->where('p.id IN (' . implode(',', $personIds) . ')')
            ->andWhere('prefEmails.id IS NULL')
            ->andWhere('email.id IS NULL')
            ->andWhere('p.deletedAt IS NULL')
            ->andWhere('p.dontWantToBeContacted !=1 ')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
    
    public function getEventPersonWithoutEmails($event)
    {
        $dql = $this->createQueryBuilder('p')
            ->leftJoin('p.eventPersons', 'ep')    
            ->leftjoin('p.preferedEmails', 'prefEmails')
            ->leftJoin('p.coordinate', 'coord')
            ->leftJoin('coord.email', 'email')
            ->where('ep.event = '.$event->getId())
            ->andWhere('prefEmails.id IS NULL')
            ->andWhere('email.id IS NULL')
            ->andWhere('p.deletedAt IS NULL')
            ->andWhere('p.dontWantToBeContacted !=1 ')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getListForMassiveDocumentGeneration($personIds)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p as object, p.id as p_id, p.name as p_name,p.firstName as p_firstName, civ.name as p_civility, coord.addressLine1, coord.addressLine2, coord.cedex, city.name as cityName, city.zipCode as zipcode, mt.name as mt_name, repfunction.name as rep_function, p.slug as slug')
            ->leftJoin('p.coordinate', 'coord')
            ->leftJoin('p.civility', 'civ')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('p.representations', 'reps')
            ->leftJoin('reps.mandateType', 'mt')
            ->leftJoin('reps.personFunction', 'repfunction')
            ->where('p.id IN (' . implode(',', $personIds) . ')')
            ->andWhere('p.deletedAt IS NULL')
            ->andWhere('p.dontWantToBeContacted !=1 ')
            ->orderby('p.name, p.firstName', 'ASC')
            ->groupBy('p_id')
        ;
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function searchPersonForImport($personSlug, $insee = null, $entityId = null)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.slug LIKE \'' . $personSlug . '%\'');
        if ($insee) {
            $dql->leftJoin('p.coordinate', 'coord')
            //->leftJoin('coord.email', 'email')
            ->leftJoin('coord.city', 'city')
            ->andWhere('city.insee=\'' . $insee . '\'');
        }
        if ($entityId) {
            $dql->leftJoin('p.entity', 'ety');
            $dql->andWhere('ety.id=' . $entityId);
        }

        $query = $this->_em->createQuery($dql);
        $query->setMaxResults(1);

        return $query->getOneOrNullResult();
    }

    public function personIdsInGroup($groupId)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p.id')
            ->leftJoin('p.pfoPersonGroups', 'ppg')
            ->leftjoin('ppg.group', 'g')
            ->where('g.id=' . $groupId)
            ->andWhere('p.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function personIdsInEvent($eventId)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p.id')
            ->leftJoin('p.eventPersons', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id=' . $eventId)
            ->andWhere('p.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function getEventPersonsQuery($eventId,$filters=[])
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p, ep, coord, city, e')
            ->leftJoin('p.coordinate', 'coord')
            ->leftJoin('coord.email', 'email')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('p.eventPersons', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id=' . $eventId)
            ->andWhere('p.deletedAt IS NULL')
        ;
        if (count($filters) > 1) {
            $conditions = [];

            foreach ($filters as $key => $filter) {
                switch ($key) {
                    case 'is_present':
                        $conditions[] = $dql->expr()->isNotNull('ep.confirmationDate');
                        break;
                    case 'is_missing':
                        $conditions[] = $dql->expr()->isNotNull('ep.unconfirmationDate');
                        break;
                    case 'is_represent':
                        $conditions[] = $dql->expr()->isNotNull('ep.representedBy');
                        break;
                }
            }
            $dql->andWhere($dql->expr()->orX(implode(' OR ', $conditions)));
        }

        return $query = $this->_em->createQuery($dql);
    }

    public function searchDuplicateElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('p')
        ->select('p as object, count(p) as nb')
        ->leftJoin('p.coordinate', 'coord')
        ->leftJoin('coord.city', 'city')
        ->leftJoin('p.entity', 'entity')
        ->groupBy("p.name,p.firstName,city.insee")
        ->orderBy('nb', 'DESC')
        ->having('nb > 1')
        ;
        if ($entityId) {
            $dql->andwhere('entity.deletedAt IS NULL');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getDuplicatesElements($person, $entityId = null, $exludeId = null)
    {
        $searchInsee = ($person->getCoordinate() && $person->getCoordinate()->getCity()) ? $person->getCoordinate()->getCity()->getInsee() : null;

        $dql = $this->createQueryBuilder('p')
        ->select('p')
        ->leftJoin('p.coordinate', 'coord')
        ->leftJoin('coord.city', 'city')
        ->leftJoin('p.entity', 'entity')
        ->where('p.name LIKE \'' . str_replace("'", "_", $person->getName()) . '\'');
        if ($person->getFirstName()) {
            $dql->andWhere('p.firstName LIKE \'' . str_replace("'", "_", $person->getFirstName()) . '\'');
        }
        if ($searchInsee) {
            $dql->andWhere('city.insee = \'' . $searchInsee . '\'');
        }
        if ($entityId) {
            $dql->andwhere('entity.deletedAt IS NULL');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND p.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        if ($exludeId) {
            $dql->andWhere('p.id != ' . $exludeId . '');
        }
        $query = $this->_em->createQuery($dql);
        //echo $query->getSQL();die;

        return $query->getResult();
    }

    public function getEventPersons(Event $event, EventAlert $eventAlert = null)
    {
        $dql = $this->createQueryBuilder('p')
            ->select('p')
            ->leftJoin('p.eventPersons', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id = ' . $event->getId())
        ;
        if ($eventAlert !== null) {
            if ($eventAlert->getOnlyForConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NOT NULL OR ep.representedBy IS NOT NULL');
            }
            if ($eventAlert->getOnlyForUnConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NULL AND ep.representedBy IS NULL');
            }
        }
        $query = $this->_em->createQuery($dql);
        //echo $query->getSQL();die;

        return $query->getResult();
    }
    
    public function getPersonWithPfo() {
        $dql = $this->createQueryBuilder('p')
                ->select('p')
                ->innerJoin('p.pfos', 'pf');
        $query = $this->_em->createQuery($dql);
        return $query->getResult();
    }
}
