<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use PostparcBundle\Entity\Event;
use PostparcBundle\Entity\EventAlert;
use Cocur\Slugify\Slugify;

/**
 * PfoRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PfoRepository extends EntityRepository
{
    public function getOrganizationPfos($organizationId, $entityId = null, $readerLimitations = null, $show_SharedContents = true, $subServiceOrganizations = null)
    {
        $organisationsIdsArray = [$organizationId];
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo,p, o, s, f, af')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->where('pfo.deletedAt IS NULL')
            ->andWhere('o.deletedAt IS NULL')
            ->andWhere('p.deletedAt IS NULL');

        // ajout pfos des organismes enfants de type service
        if (is_array($subServiceOrganizations) && count($subServiceOrganizations)) {
            foreach ($subServiceOrganizations as $subServiceOrganization) {
                $organisationsIdsArray[] = $subServiceOrganization->getId();
            }
        }
        $dql->andWhere('o.id IN (' . implode(',', $organisationsIdsArray) . ')');

        // ajout limitation sur fonction principale uniquement
        $dql->andWhere('(f.id is not null and pfo.isMainFunction=1) or f.id is null');

        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        if (is_array($readerLimitations)) {
            if (array_key_exists('functionIds', $readerLimitations) && is_array($readerLimitations['functionIds']) && count($readerLimitations['functionIds']) && 'off' == $readerLimitations['function_noLimitation']) {
                $dql->andwhere('f.id IS NULL OR f.id  IN (' . implode(',', $readerLimitations['functionIds']) . ')');
            }
            if (array_key_exists('serviceIds', $readerLimitations) && is_array($readerLimitations['serviceIds']) && count($readerLimitations['serviceIds']) && 'off' == $readerLimitations['service_noLimitation']) {
                $dql->andwhere('s.id IS NULL OR s.id  IN (' . implode(',', $readerLimitations['serviceIds']) . ')');
            }
            if (array_key_exists('organizationTypeIds', $readerLimitations) && is_array($readerLimitations['organizationTypeIds']) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->leftJoin('o.organizationType', 'ot');
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && is_array($readerLimitations['tagIds']) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->leftJoin('pfo.tags', 'tag');
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }

        return $query = $this->_em->createQuery($dql);
    }



    public function getPersonPfos($personId, $entityId = null, $readerLimitations = null, $show_SharedContents = true)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo,p, o, s, f, af')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->where('p.id=' . $personId)
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderBy('o.slug, f.slug', 'ASC');

        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations)) {
            if (array_key_exists('functionIds', $readerLimitations) && is_array($readerLimitations['functionIds']) && count($readerLimitations['functionIds']) && 'off' == $readerLimitations['function_noLimitation']) {
                $dql->andwhere('f.id IS NULL OR f.id  IN (' . implode(',', $readerLimitations['functionIds']) . ')');
            }
            if (array_key_exists('serviceIds', $readerLimitations) && is_array($readerLimitations['serviceIds']) && count($readerLimitations['serviceIds']) && 'off' == $readerLimitations['service_noLimitation']) {
                $dql->andwhere('s.id IS NULL OR s.id  IN (' . implode(',', $readerLimitations['serviceIds']) . ')');
            }
            if (array_key_exists('organizationTypeIds', $readerLimitations) && is_array($readerLimitations['organizationTypeIds']) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->leftJoin('o.organizationType', 'ot');
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && is_array($readerLimitations['tagIds']) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->leftJoin('pfo.tags', 'tag');
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getListForSelection($pfoIds)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo, p,civ, o, s, f, af, coord, evt, rep, city, ety')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.entity', 'ety')
            ->leftJoin('p.civility', 'civ')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->where('pfo.id IN (' . implode(',', $pfoIds) . ')')
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderBy('p.name, o.name', 'ASC');

        return $query = $this->_em->createQuery($dql);
    }

    public function getPfoWithoutEmails($pfoIds)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->leftjoin('pfo.email', 'pfoEmail')
            ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
            ->leftJoin('pfo.organization', 'org')
            ->leftJoin('org.coordinate', 'coordOrg')
            ->leftJoin('coordOrg.email', 'emailOrg')
            ->where('pfo.id IN (' . implode(',', $pfoIds) . ')')
            ->andWhere('pfo.deletedAt IS NULL')
            ->andWhere('pfopreferedEmails.id IS NULL')
            ->andWhere('emailOrg.id IS NULL');
        $dql->andWhere($dql->expr()->orX(
                $dql->expr()->isNull('pfoEmail'),
                $dql->expr()->eq('pfoEmail.email', "''")
        ));

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
    
    public function getEventPfoWithoutEmails($event) {
        $dql = $this->createQueryBuilder('pfo')
            ->leftJoin('pfo.eventPfos', 'ep')    
            ->leftjoin('pfo.email', 'pfoEmail')
            ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
            ->leftJoin('pfo.organization', 'org')
            ->leftJoin('org.coordinate', 'coordOrg')
            ->leftJoin('coordOrg.email', 'emailOrg')
            ->where('ep.event = '.$event->getId())
            ->andWhere('pfo.deletedAt IS NULL')
            ->andWhere('pfopreferedEmails.id IS NULL')
            ->andWhere('emailOrg.id IS NULL');
        $dql->andWhere($dql->expr()->orX(
                $dql->expr()->isNull('pfoEmail'),
                $dql->expr()->eq('pfoEmail.email', "''")
        ));

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function simpleSearch($q, $entityId = null, $readerLimitations = null, $show_SharedContents = true)
    {
        $slugify = new Slugify();
        $slug = $slugify->slugify($q, '-');
        $dql = $this->createQueryBuilder('pfo')
            ->distinct()
            ->select('pfo,p, o, s, f, af, coord, city, e, evt, rep, ety')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->leftJoin('pfo.preferedCoordinateAddress', 'prefcoord')
            ->leftJoin('prefcoord.email', 'prefcoordEmail')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            ->leftJoin('pfo.entity', 'ety')
            ->leftJoin('pfo.email', 'e')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.personFunction', 'f')
            ->where('pfo.deletedAt IS NULL')
            ->orderby('p.name, p.firstName, o.name', 'ASC')
        ;
        if ($q) {
            $q = str_replace("'", '', $q);
            $whereCondition = "( (o.name LIKE '%" . $q . "%' OR o.abbreviation LIKE '%" . $q . "%' ) AND o.deletedAt IS NULL )"
              . " OR ( (p.name LIKE '%" . $q . "%' OR p.firstName LIKE '%" . $q . "%') AND p.deletedAt IS NULL)"
              . " OR s.name LIKE '%" . $q . "%' "
              . " OR f.name LIKE '%" . $q . "%' "
              . " OR e.email LIKE '%" . $q . "%' "
              . " OR prefcoordEmail.email LIKE '%" . $q . "%' "
              . " OR p.slug LIKE '%" . $slug . "%'";
            ;
            if (strlen(preg_replace('/\D+/', '', $q)) > 6 && 0 == substr_count($q, '@')) {
                $whereCondition .= " OR pfo.phone LIKE '%" . preg_replace('/\D+/', '', $q) . "%' "
                . " OR pfo.mobilePhone LIKE '%" . preg_replace('/\D+/', '', $q) . "%' "
                . " OR prefcoord.mobilePhone LIKE '%" . preg_replace('/\D+/', '', $q) . "%' "
                ;
            }

            $dql->andWhere(
                $whereCondition
            );
        }
        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations)) {
            if (array_key_exists('functionIds', $readerLimitations) && is_array($readerLimitations['functionIds']) &&  count($readerLimitations['functionIds']) && 'off' == $readerLimitations['function_noLimitation']) {
                $dql->andwhere('f.id IS NULL OR f.id  IN (' . implode(',', $readerLimitations['functionIds']) . ')');
            }
            if (array_key_exists('serviceIds', $readerLimitations) && is_array($readerLimitations['serviceIds']) && count($readerLimitations['serviceIds']) && 'off' == $readerLimitations['service_noLimitation']) {
                $dql->andwhere('s.id IS NULL OR s.id  IN (' . implode(',', $readerLimitations['serviceIds']) . ')');
            }
            if (array_key_exists('organizationTypeIds', $readerLimitations) && is_array($readerLimitations['organizationTypeIds']) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->leftJoin('o.organizationType', 'ot');
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && is_array($readerLimitations['tagIds']) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->leftJoin('pfo.tags', 'tag');
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }

        return $this->_em->createQuery($dql);
    }

    public function advancedSearch($searchParams, $entityId = null, $readerLimitations = null, $show_SharedContents = true)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->distinct()
            ->select('pfo, p, o, ot, s, f, af, coord, city, evt, rep, entity, tag')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('o.organizationType', 'ot')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('coord.event', 'evt')
            ->leftJoin('coord.representation', 'rep')
            ->leftJoin('pfo.entity', 'entity')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('pfo.connectingCity', 'connectCity')
            ->leftJoin('city.territories', 'territory')
            ->leftJoin('connectCity.territories', 'connectTerritory')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.email', 'e')
            ->leftJoin('pfo.pfoPersonGroups', 'ppg')
            ->leftjoin('ppg.group', 'g')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.tags', 'tag')
            ->where('pfo.deletedAt IS NULL')
            ->orderby('p.name, p.firstName, o.name', 'ASC')
        ;
        if (isset($searchParams['serviceIds']) && count($searchParams['serviceIds']) > 0) {
            if (isset($searchParams['service_exclusion']) && 'on' == $searchParams['service_exclusion']) {
                $dql->andwhere('( s.id is null or s.id  NOT IN (' . implode(',', $searchParams['serviceIds']) . ') )');
            } else {
                $dql->andwhere('s.id  IN (' . implode(',', $searchParams['serviceIds']) . ')');
            }
        }
        if (isset($searchParams['functionIds']) && count($searchParams['functionIds']) > 0) {
            if (isset($searchParams['function_exclusion']) && 'on' == $searchParams['function_exclusion']) {
                $dql->andwhere('( f.id is null or f.id  NOT IN (' . implode(',', $searchParams['functionIds']) . ') )');
            } else {
                $dql->andwhere('f.id  IN (' . implode(',', $searchParams['functionIds']) . ')');
            }
        }
        if (isset($searchParams['organizationIds']) && count($searchParams['organizationIds']) > 0) {
            if (isset($searchParams['organization_exclusion']) && 'on' == $searchParams['organization_exclusion']) {
                $dql->andwhere('( o.id is null or  o.id  NOT IN (' . implode(',', $searchParams['organizationIds']) . ') )');
            } else {
                $dql->andwhere('o.id  IN (' . implode(',', $searchParams['organizationIds']) . ')');
                $dql->andwhere('o.deletedAt IS NULL');
            }
        }
        if (isset($searchParams['organizationTypeIds']) && count($searchParams['organizationTypeIds']) > 0) {
            if (isset($searchParams['organizationType_exclusion']) && 'on' == $searchParams['organizationType_exclusion']) {
                $dql->andwhere('( ot.id is null OR ot.id  NOT IN (' . implode(',', $searchParams['organizationTypeIds']) . ') )');
            } else {
                $dql->andwhere('ot.id  IN (' . implode(',', $searchParams['organizationTypeIds']) . ')');
            }
        }
        if (isset($searchParams['cityIds']) && count($searchParams['cityIds']) > 0) {
            if (isset($searchParams['city_exclusion']) && 'on' == $searchParams['city_exclusion']) {
                $dql->andwhere('( city.id is null or city.id  NOT IN (' . implode(',', $searchParams['cityIds']) . ') )');
            } else {
                $dql->andwhere('( city.id  IN (' . implode(',', $searchParams['cityIds']) . ') OR connectCity.id  IN (' . implode(',', $searchParams['cityIds']) . ') )');
            }
        }
        if (isset($searchParams['departmentIds']) && count($searchParams['departmentIds']) > 0) {
            $slugs = "'" . implode("','", $searchParams['departmentIds']) . "'";
            if (isset($searchParams['department_exclusion']) && 'on' == $searchParams['department_exclusion']) {
                $dql->andwhere("( city.id is null or city.slugDepartment NOT IN ($slugs) )");
            } else {
                $dql->andwhere("city.slugDepartment IN ($slugs)");
            }
        }
        if (isset($searchParams['groupIds']) && count($searchParams['groupIds']) > 0) {
            if (isset($searchParams['group_exclusion']) && 'on' == $searchParams['group_exclusion']) {
                // récupération des pfo.id associés aux groupes à exclure
                $subQueryBuilder = $this->createQueryBuilder('pfo')
                ->select('pfo.id')
                ->distinct()
                ->leftJoin('pfo.pfoPersonGroups', 'ppg')
                ->leftjoin('ppg.group', 'g')
                ->where('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                $subQueryResult = $subQueryBuilder->getQuery()->getScalarResult();
                $excludeIds = array_column($subQueryResult, 'id');
                if (($excludeIds !== []) > 0) {
                    $dql->andwhere('( pfo.id  NOT IN (' . implode($excludeIds, ',') . ') )');
                }
            } else {
                $dql->andwhere('g.id  IN (' . implode(',', $searchParams['groupIds']) . ')');
                $dql->andwhere('g.deletedAt IS NULL');
            }
        }
        if (isset($searchParams['territoryIds']) && count($searchParams['territoryIds']) > 0) {
            if (isset($searchParams['territory_exclusion']) && 'on' == $searchParams['territory_exclusion']) {
                $dql->andwhere('( territory.id is null or territory.id  NOT IN (' . implode(',', $searchParams['territoryIds']) . ') )');
            } else {
                $dql->andwhere('( territory.id  IN (' . implode(',', $searchParams['territoryIds']) . ') OR connectTerritory.id IN (' . implode(',', $searchParams['territoryIds']) . '))');
                $dql->andwhere('territory.deletedAt IS NULL');
            }
        }
        if (isset($searchParams['tagIds']) && count($searchParams['tagIds']) > 0) {
            if (isset($searchParams['tag_exclusion']) && 'on' == $searchParams['tag_exclusion']) {
                // récupération des pfo.id associés aux tags à exclure
                $subQueryBuilder = $this->createQueryBuilder('pfo')
                ->select('pfo.id')
                ->distinct()
                ->leftJoin('pfo.tags', 'tag')
                ->where('tag.id  IN (' . implode(',', $searchParams['tagIds']) . ')');
                $subQueryResult = $subQueryBuilder->getQuery()->getScalarResult();
                $excludeIds = array_column($subQueryResult, 'id');
                if (($excludeIds !== []) > 0) {
                    $dql->andwhere('( pfo.id  NOT IN (' . implode(',', $excludeIds) . ') )');
                }
                //$dql->andwhere('( tag.id is null or tag.id  NOT IN (' . implode(',', $searchParams['tagIds']) . ') )');
            } else {
                $dql->andwhere('tag.id  IN (' . implode(',', $searchParams['tagIds']) . ')');
            }
        }
        if (isset($searchParams['mandateTypeIds']) && count($searchParams['mandateTypeIds']) > 0) {
            $dql->leftJoin('pfo.representations', 'reps')
              ->leftJoin('reps.mandateType', 'mt');
            if (isset($searchParams['mandateType_exclusion']) && 'on' == $searchParams['mandateType_exclusion']) {
                $dql->andwhere('( mt.id is null or mt.id  NOT IN (' . implode(',', $searchParams['mandateTypeIds']) . ') )');
            } else {
                $dql->andwhere('mt.id IN (' . implode(',', $searchParams['mandateTypeIds']) . ')');
            }
        }
        if (isset($searchParams['professionIds']) && count($searchParams['professionIds']) > 0) {
            $dql->leftJoin('p.profession', 'prof');
            if (isset($searchParams['profession_exclusion']) && 'on' == $searchParams['profession_exclusion']) {
                $dql->andwhere('( prof.id is null or prof.id  NOT IN (' . implode(',', $searchParams['professionIds']) . ') )');
            } else {
                $dql->andwhere('prof.id IN (' . implode(',', $searchParams['professionIds']) . ')');
            }
        }
        if (isset($searchParams['maxUpdatedDate']) && '' != $searchParams['maxUpdatedDate']) {
            $maxDate = new \DateTime($searchParams['maxUpdatedDate']);
            $dql->andWhere("pfo.updated <='". $maxDate->format('Y-m-d')."'");
        }
        if (isset($searchParams['createdByIds']) && count($searchParams['createdByIds']) > 0) {
            $dql->andwhere('pfo.createdBy  IN (' . implode(',', $searchParams['createdByIds']) . ')');
        }
        if (isset($searchParams['observation']) && '' != $searchParams['observation']) {
            $dql->andWhere('pfo.observation LIKE \'%' . str_replace('\'', '_', $searchParams['observation']) . '%\'');
        }

        if (array_key_exists('onlyWithEmail', $searchParams) && $searchParams['onlyWithEmail']) {
            $dql->andwhere('e.email != \'\'');
        }
        
        if (isset($searchParams['createdByEntitiesIds']) && count($searchParams['createdByEntitiesIds']) > 0) {
            $dql->andwhere('entity.id IN (' . implode(',', $searchParams['createdByEntitiesIds']) . ') AND p.isShared=1');
            $entityId = null;
        }

        if ($entityId) {
            $dql->andwhere('entity.deletedAt IS NULL');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations)) {
            if (array_key_exists('functionIds', $readerLimitations) && count($readerLimitations['functionIds']) && 'off' == $readerLimitations['function_noLimitation']) {
                $dql->andwhere('f.id IS NULL OR f.id  IN (' . implode(',', $readerLimitations['functionIds']) . ')');
            }
            if (array_key_exists('serviceIds', $readerLimitations) && count($readerLimitations['serviceIds']) && 'off' == $readerLimitations['service_noLimitation']) {
                $dql->andwhere('s.id IS NULL OR s.id  IN (' . implode(',', $readerLimitations['serviceIds']) . ')');
            }
            if (array_key_exists('organizationTypeIds', $readerLimitations) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }

        return $this->_em->createQuery($dql);
    }

    public function getListForMassiveDocumentGeneration($pfoIds)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo as object, pfo.id as pfo_id, p.name as p_name,p.firstName as p_firstName, civ.name as p_civility, coord.addressLine1, coord.addressLine2, coord.cedex, city.name as cityName, city.zipCode as zipcode, s.name as pfo_service, af.name as pfo_additionalFunction, o.name as o_name, mt.name as mt_name, repfunction.name as rep_function')
            //->addSelect("CASE WHEN (civ.isFeminine=0) THEN  CONCAT(f.menParticle,' ',f.name) ELSE CONCAT(f.womenParticle,' ',f.womenName)  END as pfo_function")
            ->addSelect('CASE WHEN (civ.isFeminine=0 OR f.womenName IS NULL) THEN  f.name ELSE f.womenName END as pfo_function')
            ->addSelect('CASE WHEN (civ.isFeminine=0 OR f.womenParticle IS NULL) THEN f.menParticle ELSE f.womenParticle END as pfo_particleFunction')
            ->addSelect("CONCAT(p.slug,'-',f.slug,'-',o.slug) as slug")
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('p.civility', 'civ')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('o.organizationType', 'ot')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('coord.city', 'city')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.additionalFunction', 'af')
            ->leftJoin('pfo.representations', 'reps')
            ->leftJoin('reps.personFunction', 'repfunction')
            ->leftJoin('reps.mandateType', 'mt')
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderby('o.name, p.name, p.firstName', 'ASC')
            ->groupBy('pfo_id')
        ;
        if (is_array($pfoIds)) {
            $dql->where('pfo.id IN (' . implode(',', $pfoIds) . ')');
        } else {
            $dql->where('pfo.id =' . $pfoIds);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function pfoIdsInGroup($groupId)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo.id')
            ->leftJoin('pfo.pfoPersonGroups', 'ppg')
            ->leftjoin('ppg.group', 'g')
            ->where('g.id=' . $groupId)
            ->andWhere('pfo.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function pfoIdsInEvent($eventId)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo.id')
            ->leftJoin('pfo.eventPfos', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id=' . $eventId)
            ->andWhere('pfo.deletedAt IS NULL');
        $query = $this->_em->createQuery($dql);
        $result = $query->getScalarResult();

        return array_map('current', $result);
    }

    public function getEventPfosQuery($eventId, $entityId = null, $readerLimitations = null, $show_SharedContents = true,$filters=[])
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo, p, ep, o, f, s, coord, city')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.organization', 'o')
            ->leftJoin('pfo.eventPfos', 'ep')
            ->leftJoin('ep.event', 'e')
            ->leftJoin('pfo.personFunction', 'f')
            ->leftJoin('pfo.service', 's')
            ->leftJoin('o.coordinate', 'coord')
            ->leftJoin('coord.city', 'city')
            ->where('e.id=' . $eventId)
            ->andWhere('pfo.deletedAt IS NULL')
        ;
        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations)) {
            if (array_key_exists('functionIds', $readerLimitations) && count($readerLimitations['functionIds']) && 'off' == $readerLimitations['function_noLimitation']) {
                $dql->andwhere('f.id IS NULL OR f.id  IN (' . implode(',', $readerLimitations['functionIds']) . ')');
            }
            if (array_key_exists('serviceIds', $readerLimitations) && count($readerLimitations['serviceIds']) && 'off' == $readerLimitations['service_noLimitation']) {
                $dql->andwhere('s.id IS NULL OR s.id  IN (' . implode(',', $readerLimitations['serviceIds']) . ')');
            }
            if (array_key_exists('organizationTypeIds', $readerLimitations) && count($readerLimitations['organizationTypeIds']) && 'off' == $readerLimitations['organizationType_noLimitation']) {
                $dql->leftJoin('o.organizationType', 'ot');
                $dql->andwhere('ot.id IS NULL OR ot.id  IN (' . implode(',', $readerLimitations['organizationTypeIds']) . ')');
            }
            if (array_key_exists('tagIds', $readerLimitations) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation']) {
                $dql->leftJoin('pfo.tags', 'tag');
                $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
            }
        }
        
        if (count($filters) > 1) {
            $conditions = [];

            foreach ($filters as $key => $filter) {
                switch ($key) {
                    case 'is_present':
                        $conditions[] = $dql->expr()->isNotNull('ep.confirmationDate');
                        break;
                    case 'is_missing':
                        $conditions[] = $dql->expr()->isNotNull('ep.unconfirmationDate');
                        break;
                    case 'is_represent':
                        $conditions[] = $dql->expr()->isNotNull('ep.representedBy');
                        break;
                }
            }
            $dql->andWhere($dql->expr()->orX(implode(' OR ', $conditions)));
        }

        return $query = $this->_em->createQuery($dql);
    }

    public function autoComplete($q, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->leftJoin('pfo.person', 'p')
            ->orderby('p.name, p.firstName', 'ASC')
            ->where('pfo.deletedAt IS NULL')
        ;
        if ($q) {
            $dql->andWhere("p.name LIKE '%" . $q . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function autoCompleteForEvent($eventId, $term, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->leftJoin('pfo.person', 'p')
            ->leftJoin('pfo.eventPfos', 'ep')
            ->leftJoin('ep.event', 'evt')
            ->where('evt.id is null or evt.id!=' . $eventId)
            ->andWhere('pfo.deletedAt IS NULL')
            ->orderby('p.name, p.firstName', 'ASC')
        ;
        if ($term) {
            $dql->andWhere("p.name LIKE '%" . $term . "%'");
        }
        if ($entityId) {
            $dql->leftJoin('pfo.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND pfo.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function batchDelete($ids = null, $entityId = null, $currentUser = null)
    {
        if ($ids) {
            // first query for hard delete
            $hardDql = $this->createQueryBuilder('s')->delete('PostparcBundle\Entity\Pfo pfo')->where('pfo.id IN (' . implode(',', $ids) . ')');
            $hardDql->andWhere('pfo.deletedAt IS NOT NULL');

            // second query for soft delete
            $now = new \Datetime();
            $softDql = $this->createQueryBuilder('s')->update('PostparcBundle\Entity\Pfo pfo')
              ->set('pfo.deletedAt', "'" . $now->format('Y-m-d H:i:s') . "'")
              ->where('pfo.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $hardDql->andWhere('pfo.entity=' . $entityId);
                $softDql->andWhere('pfo.entity=' . $entityId);
            }
            if ($currentUser) {
                $softDql->set('pfo.deletedBy', $currentUser->getId());
            }

            //queries execution
            $this->_em->createQuery($hardDql)->execute();
            $this->_em->createQuery($softDql)->execute();
        }
    }

    public function batchRestore($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('pfo')->update('PostparcBundle\Entity\Pfo pfo')
              ->set('pfo.deletedAt', 'NULL')
              ->set('pfo.deletedBy', 'NULL')
              ->where('pfo.id IN (' . implode(',', $ids) . ')');

            if ($entityId) {
                $dql->andWhere('pfo.entity=' . $entityId);
            }
            $this->_em->createQuery($dql)->execute();
        }
    }

    public function getTrashedElements($entityId = null)
    {
        $dql = $this->createQueryBuilder('pfo')->select('pfo')
            ->where('pfo.deletedAt IS NOT NULL')
            ->leftJoin('pfo.person', 'p')
            ->orderby('p.name, p.firstName', 'ASC');
        if ($entityId) {
            $dql->andWhere('pfo.entity=' . $entityId);
        }
        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    public function getEventPfos(Event $event, EventAlert $eventAlert = null)
    {
        $dql = $this->createQueryBuilder('pfo')
            ->select('pfo')
            ->leftJoin('pfo.eventPfos', 'ep')
            ->leftJoin('ep.event', 'e')
            ->where('e.id = ' . $event->getId())
        ;
        if ($eventAlert !== null) {
            if ($eventAlert->getOnlyForConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NOT NULL OR ep.representedBy IS NOT NULL');
            }
            if ($eventAlert->getOnlyForUnConfirmedContact()) {
                $dql->andWhere('ep.confirmationDate IS NULL AND ep.representedBy IS NULL');
            }
        }
        $query = $this->_em->createQuery($dql);
        //echo $query->getSQL();die;

        return $query->getResult();
    }
}
