<?php

namespace PostparcBundle\Repository;

use Cocur\Slugify\Slugify;

/**
 * EventRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
    public function search($filter, $entityId = null, $readerLimitations = null, $show_SharedContents = true)
    {
        $slugify = new Slugify();
        $dql = $this->createQueryBuilder('e')->select('e')
                ->leftJoin('e.eventType', 'et')
                ->leftJoin('e.tags', 't');

        if (array_key_exists('name', $filter) && $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('e.slug LIKE \'%' . $slug . '%\'');
        }
        if (isset($filter['eventType']) && $filter['eventType']) {
            $dql->andwhere('et.id = ' . $filter['eventType']);
        }
        if (array_key_exists('tags', $filter) && $filter['tags']) {
            $tagIds = [];
            foreach ($filter['tags'] as $tag) {
                $tagIds[] = $tag->getId();
                // search in sub tags
                $subTags = $this->getEntityManager()->getRepository('PostparcBundle\Entity\Tag')->getChildren($node = $tag, $direct = false, $sortByField = null, $direction = 'asc', $includeNode = true);
                foreach ($subTags as $subTag) {
                    $tagIds[] = $subTag->getId();
                }
            }
            if (($tagIds !== []) > 0) {
                $dql->andWhere('t.id IN (' . implode(',', $tagIds) . ')');
            }
        }

        if ($entityId) {
            $dql->leftJoin('e.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND e.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }

        if (is_array($readerLimitations) && (array_key_exists('tagIds', $readerLimitations) && count($readerLimitations['tagIds']) && 'off' == $readerLimitations['tag_noLimitation'])) {
            $dql->leftJoin('e.tags', 'tag');
            $dql->andwhere('tag.id IS NULL OR tag.id  IN (' . implode(',', $readerLimitations['tagIds']) . ')');
        }
        
        if (isset($filter['createdBy']) && $filter['createdBy']) {
            $creator = $filter['createdBy'];
            $dql->andWhere('e.createdBy='.$creator->getId());
        }

        return $query = $this->_em->createQuery($dql);
    }

    public function batchDelete($ids = null, $entityId = null)
    {
        if ($ids) {
            $dql = $this->createQueryBuilder('e')->delete('PostparcBundle\Entity\Event e')->where('e.id IN (' . implode(',', $ids) . ')');
            if ($entityId) {
                $dql->andWhere('e.entity=' . $entityId);
            }

            return $query = $this->_em->createQuery($dql)->execute();
        }
    }

    public function autoComplete($q, $entityId = null, $show_SharedContents = true, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('e')
            ->orderby('e.name', 'ASC')
        ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q, '-');
            $dql->andwhere('e.slug LIKE \'%' . $slug . '%\'');
        }
        if ($entityId) {
            $dql->leftJoin('e.entity', 'entity');
            if ($show_SharedContents) {
                $dql->andWhere('entity.id=' . $entityId . ' OR (entity.id!=' . $entityId . ' AND e.isShared=1)');
            } else {
                $dql->andWhere('entity.id=' . $entityId . '');
            }
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    public function getFuturUserEvents($user)
    {
        $now = new \Datetime();
        $dql = $this->createQueryBuilder('e')
            ->leftJoin('e.createdBy', 'u')
            ->where('u.id=' . $user->getId())
            ->andWhere('e.date >= \'' . $now->format('Y-m-d') . '\'')
            ->orderBy('e.date', 'ASC')
        ;

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
    
    public function getObjectEvents($className, $objectId)
    {
        $dql = $this->createQueryBuilder('e')->select('e as event, ep.confirmationDate, ep.unconfirmationDate')
                ->orderBy('e.date', 'DESC')
                ;
        switch($className) {
            case 'Person':
                $dql->leftJoin('e.eventPersons','ep')->leftJoin('ep.person','p')->where('p.id = '.$objectId);
                break;
            case 'Pfo':
                $dql->leftJoin('e.eventPfos','ep')->leftJoin('ep.pfo','pfo')->where('pfo.id = '.$objectId);
                break;
            case 'Representation':
                $dql->leftJoin('e.eventRepresentations','ep')->leftJoin('ep.representation','rep')->where('rep.id = '.$objectId);
                break;
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
}
