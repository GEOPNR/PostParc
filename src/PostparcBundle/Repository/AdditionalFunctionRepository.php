<?php

namespace PostparcBundle\Repository;

use Cocur\Slugify\Slugify;

/**
 * ServiceRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdditionalFunctionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * search query.
     *
     * @param type $filter
     *
     * @return type
     */
    public function search($filter)
    {
        $dql = $this->createQueryBuilder('af')->select('af');

        $slugify = new Slugify();
        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('af.slug LIKE \'%' . $slug . '%\'');
        }

        return $query = $this->_em->createQuery($dql);
    }

    /**
     * massive delete function.
     *
     * @param type $ids
     * @param type $entityId
     */
    public function batchDelete($ids = null, $entityId = null)
    {
        if ($ids !== null) {
            $dql = $this->createQueryBuilder('af')->delete('PostparcBundle\Entity\AdditionalFunction af')->where('af.id IN (' . implode(',', $ids) . ')');
            if ($entityId !== null) {
                $dql->andWhere('af.entity=' . $entityId);
            }

            //queries execution
            $this->_em->createQuery($dql)->execute();
        }
    }

    /**
     * autocomplete query.
     *
     * @param type $q
     *
     * @return type
     */
    public function autoComplete($q, $page_limit = 30, $page = null)
    {
        $dql = $this->createQueryBuilder('af')
            ->orderby('af.name', 'ASC')
        ;
        if ($q) {
            $slugify = new Slugify();
            $slug = $slugify->slugify($q, '-');
            $dql->andwhere('af.slug LIKE \'%' . $slug . '%\'');
        }
        $query = $this->_em->createQuery($dql);
        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }
        $query->useResultCache(true);

        return $query->getResult();
    }
}
