<?php

namespace PostparcBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmailRepository extends EntityRepository
{
    /**
     * list list of emails associate to one person.
     *
     * @param int $personId
     *
     * @return query
     */
    public function retrievePossiblePersonEmails($personId)
    {
        return $this->createQueryBuilder('e')
                ->distinct()
                ->leftJoin('e.coordinateEmails', 'coord')
                ->leftJoin('coord.persons', 'p')
                ->leftJoin('p.pfos', 'pfo')
                ->leftJoin('e.pfoEmails', 'pfo2')
                ->leftJoin('pfo2.person', 'p2')
                ->leftJoin('coord.organization', 'o')
                ->leftJoin('o.pfos', 'pfo3')
                ->leftJoin('pfo3.person', 'p3')
                ->leftJoin('e.personsPreferedEmails', 'p4')
                ->where('p.id=' . $personId . ' AND p.dontWantToBeContacted!=1 ')
                ->orwhere('p2.id=' . $personId . ' AND pfo2.deletedAt IS NULL AND p2.deletedAt IS NULL')
                ->orwhere('p3.id=' . $personId . ' AND pfo3.deletedAt IS NULL AND p3.deletedAt IS NULL')
                ->orwhere('p4.id=' . $personId . ' AND p4.deletedAt IS NULL')
                ->andWhere('e.email IS NOT NULL AND LENGTH(e.email)>0')
                ->orderBy('e.email', 'ASC');
    }

    /**
     * list list of emails associate to one pfo.
     *
     * @param int $pfo
     *
     * @return type
     */
    public function retrievePossiblePfoEmails($pfo)
    {
        $dql = $this->createQueryBuilder('e')
                ->distinct()
                ->leftJoin('e.coordinateEmails', 'coord')
                ->leftJoin('coord.organization', 'o')
                ->leftJoin('o.pfos', 'pfo')
                ->leftJoin('e.pfoEmails', 'pfoemails')
                ->leftJoin('e.pfosPreferedEmails', 'pfosPreferedEmails')
                ->where('pfo.id=' . $pfo->getId())
                ->orWhere('pfoemails.id=' . $pfo->getId())
                ->orWhere('pfosPreferedEmails.id=' . $pfo->getId())
                ->andWhere('e.email IS NOT NULL AND LENGTH(e.email)>0')
                ->orderBy('e.email', 'ASC');
        if ($pfo->getPerson()) {
            $dql->leftJoin('coord.persons', 'p');
            $dql->orWhere('p.id=' . $pfo->getPerson()->getId() . ' AND p.deletedAt IS NULL AND p.dontWantToBeContacted!=1');
            $dql->leftJoin('pfo.person', 'p2');
            $dql->orWhere('p2.id=' . $pfo->getPerson()->getId() . ' AND p2.deletedAt IS NULL');
            $dql->leftJoin('pfoemails.person', 'p3');
            $dql->orWhere('p3.id=' . $pfo->getPerson()->getId() . ' AND p3.deletedAt IS NULL');
        }

        return $dql;
    }

    /**
     * list list of emails associate to one pfo.
     *
     * @param int $pfo
     *
     * @return type
     */
    public function retrievePossibleRepresentationEmails($representation)
    {
        $dql = $this->createQueryBuilder('e')
                ->distinct()
                ->leftJoin('e.coordinateEmails', 'coord')
                ->leftJoin('coord.organization', 'o')
                ->leftJoin('coord.representation', 'rep')
                ->where('rep.id=' . $representation->getId())
                ->andWhere('e.email IS NOT NULL AND LENGTH(e.email)>0')
                ->orderBy('e.email', 'ASC');
        if ($representation->getPerson()) {
            $dql->leftJoin('coord.persons', 'p');
            $dql->leftJoin('e.personsPreferedEmails', 'p4');
            $dql->orWhere('p.id=' . $representation->getPerson()->getId() . ' AND p.deletedAt IS NULL');
            $dql->orwhere('p4.id=' . $representation->getPerson()->getId() . ' AND p4.deletedAt IS NULL');
        }
        if ($representation->getPfo()) {
            $pfo = $representation->getPfo();
            $dql->leftJoin('o.pfos', 'pfo')
                    ->leftJoin('e.pfoEmails', 'pfoemails')
                    ->leftJoin('e.pfosPreferedEmails', 'pfosPreferedEmails')
                    ->where('pfo.id=' . $pfo->getId() . ' AND pfo.deletedAt IS NULL')
                    ->orWhere('pfoemails.id=' . $pfo->getId() . ' AND pfoemails.deletedAt IS NULL')
                    ->orWhere('pfosPreferedEmails.id=' . $pfo->getId() . ' AND pfosPreferedEmails.deletedAt IS NULL');
        }
        if ($representation->getOrganization()) {
            $dql->orWhere('o.id=' . $representation->getOrganization()->getId());
        }

        return $dql;
    }

    /**
     * retrieve list af all email associate to the elements of the selection.
     *
     * @param array $selectionData
     *
     * @return type
     */
    public function getSelectionEmails($selectionData)
    {
        $emails = [];

        // persons
        if (isset($selectionData['personIds']) && count($selectionData['personIds'])) {
            // persons email via coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.persons', 'p')
                    ->leftJoin('p.preferedEmails', 'ppreferedEmails')
                    ->where('p.id in (' . implode(',', $selectionData['personIds']) . ')')
                    ->andWhere('ppreferedEmails.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                    ->andWhere('p.dontWantToBeContacted !=1 ')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);

            // persons prefered emails
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.personsPreferedEmails', 'p')
                    ->where('p.id in (' . implode(',', $selectionData['personIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                    ->andWhere('p.dontWantToBeContacted !=1 ')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
        }

        // pfo
        if (isset($selectionData['pfoIds']) && count($selectionData['pfoIds'])) {
            // pfo via organization / coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.organization', 'o')
                    ->leftJoin('o.pfos', 'pfo')
                    ->leftJoin('pfo.email', 'pfoEmail')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('pfoEmail.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
            // pfo via email
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.pfoEmails', 'pfo')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
            // pfo prefered emails
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.pfosPreferedEmails', 'pfo')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
            //  email via personne / coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.persons', 'p')
                    ->leftJoin('p.pfos', 'pfo')
                    ->leftJoin('pfo.organization', 'orga')
                    ->leftJoin('pfo.email', 'pfoEmail')
                    ->leftJoin('orga.coordinate', 'orgaCoorddinate')
                    ->leftJoin('orgaCoorddinate.email', 'orgaEmail')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('pfoEmail.id is null')
                    ->andWhere('orgaEmail.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
        }

        // organization emails
        if (isset($selectionData['organizationIds']) && count($selectionData['organizationIds'])) {
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.organization', 'o')
                    ->where('o.id in (' . implode(',', $selectionData['organizationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);
        }

        // representation emails
        if (isset($selectionData['representationIds']) && count($selectionData['representationIds'])) {
            // via prefered Email
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                    ->where('repPreferedEmail.id in (' . implode(',', $selectionData['representationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'');
            $query = $this->_em->createQuery($dql);
            $emailResults = array_map('current', $query->getScalarResult());
            $emails = array_merge($emails, $emailResults);

            // on soustrait les representations ayant des emails preferées
            $dql = $this->createQueryBuilder('e')
                    ->select('repPreferedEmail.id')
                    ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                    ->where('repPreferedEmail.id in (' . implode(',', $selectionData['representationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'');
            $query = $this->_em->createQuery($dql);
            $repWithPreferedEmailResults = array_map('current', $query->getScalarResult());
            if (($repWithPreferedEmailResults !== []) > 0) {
                $selectionData['representationIds'] = array_diff($selectionData['representationIds'], $repWithPreferedEmailResults);
            }

            if (count($selectionData['representationIds']) > 0) {
                // via pfo
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.organization', 'o')
                        ->leftJoin('o.pfos', 'pfo')
                        ->leftJoin('pfo.representations', 'repPfo')
                        ->leftJoin('repPfo.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPfo.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('pfopreferedEmails.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);

                // pfo prefered emails
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.pfosPreferedEmails', 'pfo')
                        ->leftJoin('pfo.representations', 'repPfo')
                        ->leftJoin('repPfo.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPfo.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);

                // via person
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.persons', 'p')
                        ->leftJoin('p.representations', 'repPerson')
                        ->leftJoin('repPerson.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('p.preferedEmails', 'ppreferedEmails')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPerson.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('ppreferedEmails.id is null')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;

                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);

                // persons prefered emails
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.personsPreferedEmails', 'p')
                        ->leftJoin('p.representations', 'repPerson')
                        ->leftJoin('repPerson.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPerson.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);

                //via organization si pas d'email pour person et pfos
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.organization', 'o')
                        ->leftJoin('o.representations', 'repOrganization')
                        ->leftJoin('repOrganization.coordinate', 'repCoord')
                        ->leftJoin('repOrganization.pfo', 'pfo')
                        ->leftJoin('pfo.organization', 'pfoOrga')
                        ->leftJoin('pfoOrga.coordinate', 'pfoCoord')
                        ->leftJoin('pfoCoord.email', 'pfoEmail')
                        ->leftJoin('repOrganization.person', 'p')
                        ->leftJoin('p.coordinate', 'pCoord')
                        ->leftJoin('pCoord.email', 'pEmail')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repOrganization.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('pfoEmail.id is null')
                        ->andWhere('pEmail.id is null')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                        ->andWhere('repPreferedEmail.id is null')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);

                // via specific coordinate
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email)')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.representation', 'r')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('r.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                        ->andWhere('repPreferedEmail.id is null')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = array_map('current', $query->getScalarResult());
                $emails = array_merge($emails, $emailResults);
            }
        }

        return array_unique($emails);
    }

    /**
     * retrieve list af all email associate to the elements of the selection.
     *
     * @param array $selectionData
     *
     * @return type
     */
    public function getSelectionDetailledCoordinates($selectionData)
    {
        $emails = [];

        // persons
        if (isset($selectionData['personIds']) && count($selectionData['personIds'])) {
            // persons email via coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.persons', 'p')
                    ->leftJoin('p.preferedEmails', 'ppreferedEmails')
                    ->where('p.id in (' . implode(',', $selectionData['personIds']) . ')')
                    ->andWhere('ppreferedEmails.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                    ->andWhere('p.dontWantToBeContacted !=1 ')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);

            // persons prefered emails
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                    ->leftJoin('e.personsPreferedEmails', 'p')
                    ->leftJoin('p.coordinate', 'coord')
                    ->where('p.id in (' . implode(',', $selectionData['personIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                    ->andWhere('p.dontWantToBeContacted !=1 ')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
        }

        // pfo
        if (isset($selectionData['pfoIds']) && count($selectionData['pfoIds'])) {
            // pfo via organization / coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.organization', 'o')
                    ->leftJoin('o.pfos', 'pfo')
                    ->leftJoin('pfo.person', 'p')
                    ->leftJoin('pfo.email', 'pfoEmail')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('pfoEmail.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
            // pfo via email
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, pfo.mobilePhone')
                    ->leftJoin('e.pfoEmails', 'pfo')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->leftJoin('pfo.person', 'p')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
            // pfo prefered emails
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, pfo.mobilePhone')
                    ->leftJoin('e.pfosPreferedEmails', 'pfo')
                    ->leftJoin('pfo.person', 'p')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
            //  email via personne / coord
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.persons', 'p')
                    ->leftJoin('p.pfos', 'pfo')
                    ->leftJoin('pfo.organization', 'orga')
                    ->leftJoin('pfo.email', 'pfoEmail')
                    ->leftJoin('orga.coordinate', 'orgaCoorddinate')
                    ->leftJoin('orgaCoorddinate.email', 'orgaEmail')
                    ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                    ->where('pfo.id in (' . implode(',', $selectionData['pfoIds']) . ')')
                    ->andWhere('pfopreferedEmails.id is null')
                    ->andWhere('pfoEmail.id is null')
                    ->andWhere('orgaEmail.id is null')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
        }

        // organization emails
        if (isset($selectionData['organizationIds']) && count($selectionData['organizationIds'])) {
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email) as email, o.name as name, coord.mobilePhone')
                    ->leftJoin('e.coordinateEmails', 'coord')
                    ->leftJoin('coord.organization', 'o')
                    ->where('o.id in (' . implode(',', $selectionData['organizationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
            ;
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);
        }

        // representation emails
        if (isset($selectionData['representationIds']) && count($selectionData['representationIds'])) {
            // via prefered Email
            $dql = $this->createQueryBuilder('e')
                    ->select('LOWER(e.email)')
                    ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                    ->where('repPreferedEmail.id in (' . implode(',', $selectionData['representationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'');
            $query = $this->_em->createQuery($dql);
            $emailResults = $query->getScalarResult();
            $emails = array_merge($emails, $emailResults);

            // on soustrait les representations ayant des emails preferées
            $dql = $this->createQueryBuilder('e')
                    ->select('repPreferedEmail.id')
                    ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                    ->where('repPreferedEmail.id in (' . implode(',', $selectionData['representationIds']) . ')')
                    ->andWhere('e.email IS NOT NULL AND e.email!=\'\'');
            $query = $this->_em->createQuery($dql);
            $repWithPreferedEmailResults = array_map('current', $query->getScalarResult());
            if (($repWithPreferedEmailResults !== []) > 0) {
                $selectionData['representationIds'] = array_diff($selectionData['representationIds'], $repWithPreferedEmailResults);
            }

            if (count($selectionData['representationIds']) > 0) {
                // via pfo
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.organization', 'o')
                        ->leftJoin('o.pfos', 'pfo')
                        ->leftJoin('pfo.person', 'p')
                        ->leftJoin('pfo.representations', 'repPfo')
                        ->leftJoin('repPfo.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('pfo.preferedEmails', 'pfopreferedEmails')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPfo.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('pfopreferedEmails.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = $query->getScalarResult();
                $emails = array_merge($emails, $emailResults);

                // pfo prefered emails
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, pfo.mobilePhone')
                        ->leftJoin('e.pfosPreferedEmails', 'pfo')
                        ->leftJoin('pfo.person', 'p')
                        ->leftJoin('pfo.representations', 'repPfo')
                        ->leftJoin('repPfo.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPfo.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = $query->getScalarResult();
                $emails = array_merge($emails, $emailResults);

                // via person
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email) as email, CONCAT(p.name, \' \', p.firstName) as name, coord.mobilePhone')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.persons', 'p')
                        ->leftJoin('p.representations', 'repPerson')
                        ->leftJoin('repPerson.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('p.preferedEmails', 'ppreferedEmails')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPerson.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('ppreferedEmails.id is null')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                        ->andWhere('p.dontWantToBeContacted !=1 ')
                ;

                $query = $this->_em->createQuery($dql);
                $emailResults = $query->getScalarResult();
                $emails = array_merge($emails, $emailResults);

                // persons prefered emails
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email), CONCAT(p.name, \' \', p.firstName) as name, repCoord.mobilePhone')
                        ->leftJoin('e.personsPreferedEmails', 'p')
                        ->leftJoin('p.representations', 'repPerson')
                        ->leftJoin('repPerson.coordinate', 'repCoord')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repPerson.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repPreferedEmail.id is null')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = $query->getScalarResult();
                $emails = array_merge($emails, $emailResults);

                //via organization si pas d'email pour person et pfos
                $dql = $this->createQueryBuilder('e')
                        ->select('LOWER(e.email), CONCAT(p.name, \' \', p.firstName) as name, pCoord.mobilePhone')
                        ->leftJoin('e.coordinateEmails', 'coord')
                        ->leftJoin('coord.organization', 'o')
                        ->leftJoin('o.representations', 'repOrganization')
                        ->leftJoin('repOrganization.coordinate', 'repCoord')
                        ->leftJoin('repOrganization.pfo', 'pfo')
                        ->leftJoin('pfo.organization', 'pfoOrga')
                        ->leftJoin('pfoOrga.coordinate', 'pfoCoord')
                        ->leftJoin('pfoCoord.email', 'pfoEmail')
                        ->leftJoin('repOrganization.person', 'p')
                        ->leftJoin('p.coordinate', 'pCoord')
                        ->leftJoin('pCoord.email', 'pEmail')
                        ->leftJoin('repCoord.email', 'repCoordEmail')
                        ->leftJoin('e.representationsPreferedEmail', 'repPreferedEmail')
                        ->where('repOrganization.id in (' . implode(',', $selectionData['representationIds']) . ')')
                        ->andWhere('repCoord.id is null or (repCoord.id is not null AND repCoordEmail.id is null)')
                        ->andWhere('pfoEmail.id is null')
                        ->andWhere('pEmail.id is null')
                        ->andWhere('e.email IS NOT NULL AND e.email!=\'\'')
                        ->andWhere('repPreferedEmail.id is null')
                ;
                $query = $this->_em->createQuery($dql);
                $emailResults = $query->getScalarResult();
                $emails = array_merge($emails, $emailResults);
            }
        }

        return array_unique($emails, SORT_REGULAR);
    }

    /**
     * delete one email.
     *
     * @param int $id
     *
     * @return type
     */
    public function delete($id = null)
    {
        if ($id) {
            $dql = $this->createQueryBuilder('g')->delete('PostparcBundle\Entity\Email e')->where('e.id=' . $id);

            return $query = $this->_em->createQuery($dql)->execute();
        }
    }
}
