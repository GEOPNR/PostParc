<?php

namespace PostparcBundle\Repository;

use Cocur\Slugify\Slugify;

/**
 * CityRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * search query.
     *
     * @param type $filter
     *
     * @return type
     */
    public function search($filter)
    {
        $slugify = new Slugify();
        $dql = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.territories', 't');

        if (isset($filter['name']) && '' != $filter['name']) {
            $slug = $slugify->slugify($filter['name'], '-');
            $dql->andwhere('c.slug LIKE \'%' . $slug . '%\'');
        }
        if (isset($filter['department']) && '' != $filter['department']) {
            $slugDepartment = $slugify->slugify($filter['department'], '-');
            $dql->andwhere("c.slugDepartment LIKE '%" . $slugDepartment . "%'");
        }
        if (isset($filter['insee']) && '' != $filter['insee']) {
            $dql->andwhere("c.insee='" . $filter['insee'] . "'");
        }
        if (isset($filter['zipCode']) && '' != $filter['zipCode']) {
            $dql->andwhere("c.zipCode LIKE '" . $filter['zipCode'] . "%'");
        }
        if (isset($filter['isActive']) && 'on' == $filter['isActive']) {
            $dql->andwhere('c.isActive=1');
        }
        if (isset($filter['territories'])) {
            $slugTerritory = $slugify->slugify($filter['territories'], '-');
            $dql->andwhere("t.slug='" . $slugTerritory . "'");
        }

        return $this->_em->createQuery($dql);
    }

    /**
     * massive delete query.
     *
     * @param type $ids
     *
     * @return type
     */
    public function batchDelete($ids = null)
    {
        if ($ids !== null) {
            $dql = $this->createQueryBuilder('c')->delete('PostparcBundle\Entity\City c')->where('c.id IN (' . implode(',', $ids) . ')');

            return $query = $this->_em->createQuery($dql)->execute();
        }
    }

    /**
     * query to return cities associate to one territory.
     *
     * @param type $territoryId
     * @param type $name
     *
     * @return type
     */
    public function listTerritoryCities($territoryId, $name)
    {
        $dql = $this->createQueryBuilder('c')
            ->distinct()
            ->select('c, t')
            ->leftJoin('c.territories', 't')
            ->orderBy('c.name', 'ASC')
        ;
        if ($territoryId) {
            $dql->andWHere('t.id=' . $territoryId);
        }
        if ($name) {
            $dql->andWHere('c.name LIKE \'%' . $name . '%\'');
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    /**
     * query to return cities associate to one territory and sub territories.
     *
     * @param type $childrens
     * @param type $name
     *
     * @return type
     */
    public function listSubTerritoryCities($childrens, $name)
    {
        $dql = $this->createQueryBuilder('c')
            ->select('c, t')
            ->leftJoin('c.territories', 't')
        ;
        $territoryId = [];
        foreach ($childrens as $teritory) {
            $territoryId[] = $teritory->getId();
        }
        $dql->andWhere('t.id IN (' . implode($territoryId, ',') . ')');
        if ($name) {
            $dql->andWHere('c.name LIKE \'%' . $name . '%\'');
        }

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    /**
     * search autocomplete query.
     *
     * @param type $term
     *
     * @return type
     */
    public function searchAutoComplete($term = '')
    {
        //TODO gÃ©rer les value vide
        $dql = $this->createQueryBuilder('c')->select('c.id, c.name, c.zipCode, c.slug');
        $dql->andwhere('(c.name LIKE :query OR c.zipCode LIKE :query)');

        return $query = $this->_em->createQuery($dql)->setParameter('query', '%' . $term . '%')->getResult();
    }

    /**
     *  autocomplete query.
     *
     * @param type $q
     * @param type $all
     *
     * @return type
     */
    public function autoComplete($q, $all = false, $page_limit = 30, $page = null)
    {
        $slugify = new Slugify();
        // gestion des apostrophe
        $q = str_replace("'", "-", $q);
        $slug = $slugify->slugify($q, '-');
        $dql = $this->createQueryBuilder('c')
            ->select('c.id, c.name, c.zipCode')
            ->orderby('c.slug', 'ASC')
        ;
        if (!$all) {
            $dql->where('c.isActive = 1');
        }
        if ($q) {
            $zipcode = $slug;
            if (5 == strlen($zipcode) && '0' == $zipcode[0]) {
                $zipcode['0'] = '%';
            }
            $dql->orWhere("c.zipCode LIKE '" . addslashes($zipcode) . "%'");
            $dql->orWhere("c.slug LIKE '%" . $slug . "%'");
        }
        $query = $this->_em->createQuery($dql);

        $query->setMaxResults($page_limit);
        if ($page) {
            $query->setFirstResult(($page - 1) * $page_limit);
        }

        return $query->getResult();
    }

    /**
     * return array with id for city for key and name for value.
     *
     * @return type
     */
    public function getKeyPair()
    {
        $dql = "SELECT c.id, c.name FROM city c WHERE c.name <> '' ORDER BY c.name";
        $stmt = $this->getEntityManager()->getConnection()->prepare($dql);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
    }

    /**
     * autoCompleteDepartment query.
     *
     * @param type $q
     * @param type $departement_slugs
     *
     * @return type
     */
    public function autoCompleteDepartment($q, $departement_slugs = null)
    {
        $slugify = new Slugify();
        $slug = $slugify->slugify($q, '-');        
        $sql = 'SELECT DISTINCT slug_department, department FROM city c WHERE c.is_active=1 ';
        if ($q) {
            $sql .= " AND c.slug_department LIKE '%" . $slug . "%'";            
        }
        if ($departement_slugs !== null) {
            $slugs = "'" . implode("','", $departement_slugs) . "'";
            $sql .= " AND c.slug_department IN ($slugs)";
        }
        $sql .= " GROUP BY department";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_KEY_PAIR);
    }
}
